ArrayList动态扩容机制
初始化：有三种方式
默认的构造器，将会以默认的大小来初始化内部的数组：public ArrayList();

用一个ICollection对象来构造，并将该集合的元素添加到ArrayList：  public ArrayList(Collection<? extends E> c)

用指定的大小来初始化内部的数组： public ArrayList(int initialCapacity) 

  
这里我们来重点关注一下无参数构造器的实现过程：

通过代码可是它的初始容量为0。而在之前JDK1,6中，初始容量为10。 

  发生扩容的条件：
根据传入的最小需要容量minCapacity来和数组的容量长度对比，若minCapactity大于或等于数组容量，则需要进行扩容。（如果实际存储数组是空数组，则最小需要容量就是默认容量）
实现扩容：
jdk7中采用>>位运算，右移动一位。 容量相当于扩大了1.5倍；
举例说明：添加20个元素到ArrayList中 

当第一次插入元素时才分配10（默认）个对象空间。之后扩容会按照1.5倍增长。

也就是当添加第11个数据的时候，Arraylist继续扩容变为10*1.5=15；

当添加第16个数据时，继续扩容变为15 * 1.5 =22个；


总结：
在JDK1.7中，如果通过无参构造的话，初始数组容量为0，当真正对数组进行添加时，才真正分配容量。
每次按照1.5倍（位运算）的比率通过copeOf的方式扩容。 
在JKD1.6中，如果通过无参构造的话，初始数组容量为10.每次通过copeOf的方式扩容后容量为原来的1.5倍加1.以上就是动态扩容的原理。












探索ArrayList自动改变size真相
ArrayList的列表对象实质上是存储在一个引用型数组里的，有人认为该数组有“自动增长机制”可以自动改变size大小。正式地说，该数组是无法改变
大小的，实际上它只是改变了该引用型数组的指向而已。下面，让我们来看看java是怎样实现ArrayList类的。
一、ArrayList类的实质
     ArrayList底层采用Object类型的数组实现，当使用不带参数的构造方法生成ArrayList对象时，
实际上会在底层生成一个长度为10的Object类型数组。
    首先，ArrayList定义了一个私有的未被序列化的数组elementData，用来存储ArrayList的对象列表（注意只定义未初始）：
　　private transient Object[] elementData;
    
    其次，以指定初始容量（Capacity）或把指定的Collection转换为引用型数组后实例化elementData数组；如果没有指定，则预置初始容量为10进行
实例化。把私有数组预先实例化，然后通过copyOf方法覆盖原数组，是实现自动改变ArrayList的大小(size)的关键。有人说ArrayList是复杂的数组，我
认为不如说ArrayList是关于数组的系统的方法组合。
　　ArrayList的构造方法源码如下：
    // 用指定的初始容量构造一个空列表。
    public ArrayList(int initialCapacity) {
        super();
        if (initialCapacity < 0)
            throw new IllegalArgumentException("Illegal Capacity: "+initialCapacity);
        this.elementData = new Object[initialCapacity];//属性指向新建长度为初始容量的临时数组
    }
    // 使用初始容量10构造一个空列表
    public ArrayList() {
        this(10);
    }
    / *构造包含利用collection的迭代器按顺序返回的指定collection元素的列表
     * @param c 集合，它的元素被用来放入列表t
     * @throws NullPointerException 如果指定集合为 null
     */
    public ArrayList(Collection<? extends E> c) {
        elementData = c.toArray();//用Collection初始化数组elementData
        size = elementData.length;
        if (elementData.getClass() != Object[].class)
            elementData = Arrays.copyOf(elementData, size, Object[].class);
    }
二、ArrayList实现自动改变size机制
   为了实现这一机制，java引进了Capacity和size概念，以区别数组的length。为了保证用户增加新的列表对象，java设置了最小容量（minCapacity）
，通常情况上，它大于列表对象的数目，所以Capactiy虽然就是底层数组的长度（length），但是对于最终用户来讲，它是无意义的。而size存储着列表
对象的数量，才是最终用户所需要的。为了防止用户错误修改，这一属性被设置为privae的，不过可以通过size()获取。
   下面，对ArrayList的初始以及其列表对象的增加和删除等三种情况下的size自动改变机制进行分析。
   1、初始Capacity和size值。
   从上面给出的ArrayList构造方法源码中，我们不难看出Capacity初始值（initialCapacity）可以由用户直接指定或由用户指定的Collection集合存
储的对象数目确定，如果没有指定，系统默认为10。而size的被声明为int型变量，默认为0，当用户指定Collection创建ArrayList时，size值等于
initialCapacity。
 
   2、add()方法
    该方法的源码如下：
    public boolean add(E e) {
        ensureCapacityInternal(size + 1);
        elementData[size++] = e;//添加对象时，自增size
        return true;
    }
    方法中调用的ensureCapacityInternal主要用来调整容量，修改elementData数组的指向。其中涉及到3个方法的调用，其核心在于grow方法：
    
    private void ensureCapacityInternal(int minCapacity) {
        modCount++;//定义于ArrayList的父类AbstractList，用于存储结构修改次数
        // overflow-conscious code
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
    }  
    private void grow(int minCapacity) {
        // overflow-conscious code
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity + (oldCapacity >> 1);//新容量扩大到原容量的1.5倍，右移一位相关于原数值除以2。
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
    }
    private static int hugeCapacity(int minCapacity) {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;//MAX_ARRAY_SIZE和Integer.MAX_VALUE为常量，详细请参阅下面的注解
    }
   
   通过以上代码，我们可知java自动增加ArrayList大小的思路是：向ArrayList添加对象时，原对象数目加1如果大于原底层数组长度，则以适当长度新
建一个原数组的拷贝，并修改原数组，指向这个新建数组。原数组自动抛弃（java垃圾回收机制会自动回收）。size则在向数组添加对象，自增1。
 
   注解：
    //定义于该类的常量，用来分配数组的size最大值。一些 VMs在数组里保留字头，试图分配更大数组时可能导致OutOfMemoryError:被请求数组的
size超出VM界限。
    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;
   //在java.lang.Integer类中常量MIN_VALUE、MAX_VALUE如下：
   public static final int   MIN_VALUE = 0x80000000;//整型取值区间下界：－2147483648
   public static final int   MAX_VALUE = 0x7fffffff;//整型取值区间上界：2147483647
　　//在java.util.AbstractList中modCount定义如下：
　　protected transient int modCount = 0;
    3、remove()方法
    该重构方法其一源码如下（其它的就不累述了）：
    public E remove(int index) {
        rangeCheck(index);
        modCount++;
        E oldValue = elementData(index);
        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);//将后面的列表对象前移
        elementData[--size] = null; // 数组前移一位，size自减，空出来的位置置null，具体的对象的销毁由Junk收集器负责
        return oldValue;
    }
    private void rangeCheck(int index) {//边界检查
        if (index < 0 || index >= this.size)
           throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }
    E elementData(int index) {//获取指定index所在位置的对象
        return (E) elementData[index];
    }
 
    通过remove()源码的学习，我们不难看出，其改变ArrayList大小的核心与add()方法相似，都是同数组拷贝。
    另外，如果确有必要，用户也可以指定ArrayList实例的容量，可以有效的降低时间成本。它是通过调用ensureCapacityInternal来实现的，源代码
如下：
    public void ensureCapacity(int minCapacity) {
        if (minCapacity > 0)
            ensureCapacityInternal(minCapacity);
    }
    因为size为private的，java给出方法来访问它：
    public int size() {
         checkForComodification();
         return this.size;
    }
 
    综上所述，在用户向ArrayList追加对象时，Java总是要先计算容量（Capacity）是否适当，若容量不足则把原数组拷贝到以指定容量为长度创建的
新数组内，并对原数组变量重新赋值，指向新数组。在这同时，size进行自增1。在删除对象时，先使用拷贝方法把指定index后面的对象前移1位（如果
有的话），然后把空出来的位置置null，交给Junk收集器销毁，size自减1，即完成了