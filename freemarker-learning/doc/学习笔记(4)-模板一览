##  简介

最简单的模板是普通 HTML 文件（或者是其他任何文本文件—FreeMarker 本身不属于 HTML）。
当客户端访问页面时，FreeMarker 要发送 HTML 代码至客户端浏览器端显示。
如果 想要页面动起来，就要在 HTML 中放置能被 FreeMarker 所解析的特殊部分。
${…}：FreeMarker 将会输出真实的值来替换花括号内的表达式，这样的表达式被称为
interpolations 插值，可以参考第上面示例的内容。

FTL tags 标签（FreeMarker  模板的语言标签）：FTL 标签和 HTML 标签有一点相似，
但是它们是 FreeMarker 的指令而且是不会直接输出出来的东西。
这些标签的使用一般以符号# 开头。
（用户自定义的 FTL 标签使用@符号来代替#，但这是更高级的主题内容了，后面会详 细地讨论）

Comments 注释：FreeMarker 的注释和 HTML 的注释相似，但是它用<#--和-->来分 隔的。
任何介于这两个分隔符（包含分隔符本身）之间内容会被 FreeMarker 忽略，就不会输出出来了。

其他任何不是 FTL  标签，插值或注释的内容将被视为静态文本，这些东西就不会被FreeMarker 所解析，会被按照原样输出出来。

directives  指令：就是所指的 FTL标签。
这些指令在 HTML的标签（如<table>和</table>）和 HTML 元素（如 table 元素）中的关系是相同的。
（如果现在你还不能区 分它们，那么把“FTL 标签”和“指令”看做是同义词即可。）

##  指令示例

尽管 FreeMarker 有很多指令，作为入门，在快速了解过程中我们仅仅来看三个最为常 用的指令。

##   if 指令

使用 if 指令可以有条件地跳过模板的一部分，这和程序语言中 if 是相似的。
假设在第 一个示例中，你只想向你的老板 Big Joe（而不是其他人）问好，就可以这样做：

<html>
	<head>
		<title>Welcome!</title>
	</head>
	<body>
		<h1>
		Welcome ${user}<#if user == "Big Joe">, our beloved leader</#if>!
		</h1>
		<p>Our latest product:
		<a  href="${latestProduct.url}">${latestProduct.name}</a>!
	</body>
</html>

<#if user == "Big Joe">, our beloved leader</#if>

在这里，我们告诉 FreeMarker，我们尊敬的领导才是 if 条件中那唯一的 user 变量值， 当它和”Big Joe”相同时才显示出来。
那么，当 condition 的判断结果为 false（布尔 值）时，在<#if condition>和</#if>标签之间的内容将会被略过。

我们来详细说说 condition 的使用：==是来判断在它两侧的值相等的操作符，比较的结 果是布尔值，true 或者 false。
在==的左侧，是引用的变量，我们很熟悉这样的语法，它会 被变量的值来替代。右侧是指定的字符串，在模板中的字符串必须放在引号内。

<#if animals.python.price == 0> Pythons are free today!
</#if>

当 price 是 0 的时候，下面的代码将会打印：”Pythons are free today!”
和前面的示例相似，字符串被直接指定，但是这里则是数字（0）被直接指定。注意到 数字是不用放在引号内的。
如果将 0 放在引号内（”0”），FreeMarker 就会将其误判为字符 串了。

当 price 不是 0 的时候，下面的代码将会打印：”Pythons are not free today!”

<#if animals.python.price != 0> Pythons are free today!
</#if>

你也许会猜测了，!=就是不等于。 你也可以这样来写代码（使用数据模型来描述哈希表变量）：

<#if animals.python.price < animals.elephant.price> Pythons are cheaper than elephants  today.
</#if>

使用<#else>标签可以指定当条件为假时程序执行的内容。例如：

<#if animals.python.price < animals.elephant.price> Pythons are cheaper than elephants  today.
<#else>
Pythons are not cheaper than elephants today.
</#if>

如果蟒蛇的价格比大象的价格低，将会打印”Python are cheaper than elephants today.”，
 否则就打印”Pythons are not cheaper than elephants today.”
 
如果变量本身就是布尔值（true   或者 false），那么可以直接让其作为 if 的条件condition：

<#if animals.python.protected>
Warning! Pythons are protected animals!
</#if>



## list指令

当需要用列表来遍历集合的内容时，list 指令是非常好用的。例如，如果在模板中用前 面示例描述序列的数据模型。

<p>We have these animals:
		<table border=1>
		<tr><th>Name<th>Price
	<#list animals as being>
	 	<tr><td>${being.name}<td>${being.price}  Euros
	</#list>
</table>

那么输出结果将会是这样的：

<p>We have these animals:
	<table border=1>
		<tr><th>Name<th>Price
		<tr><td>mouse<td>50 Euros
		<tr><td>elephant<td>5000 Euros
		<tr><td>python<td>4999 Euros
</table>

list 指令的一般格式为：
<#list sequence as loopVariable>repeatThis</#list> 
repeatThis 部分将会在给定的 sequence 遍历时在每项中重复，从第一项开始，一个接着一个。
在所有的重复中，loopVariable 将持有当前项的值。这个循环变量仅 存在于<#list …>和</#list>标签之间。
再看一个示例，遍历示例数据模型 fruits。


<p>And BTW we have these fruits:
	<ul>
	<#list whatnot.fruits as fruit>
		<li>${fruit}
	</#list>
<ul>

whatnot.fruits 表达式应该很熟悉了，我们引用了数据模型章节中示例的变量。


##  include 指令

使用 include 指令，我们可以在当前的模板中插入其他文件的内容。 假设要在一些页面中显示版权声明的信息。
那么可以创建一个文件来单独包含版权声明，之后在 需要 它的地 方插 入即 可。
比 方说 ，我 们可以 将版 权信 息单独 存放 在页 面文件copyright_footer.html 中。

<hr>
<i>
Copyright (c) 2000 <a href="http://www.acmee.com">Acmee Inc</a>,
<br>
All Rights Reserved.
</i>

当需要用到这个文件时，可以使用 include 指令来实现插入。

<html>
	<head>
	<title>Test page</title>
	</head>
	<body>
		<h1>Test page</h1>
		<p>Blah blah...
		<#include "/copyright_footer.html">
	</body>
</html>

输出的内容为：

 <html>
	<head>
		<title>Test page</title>
	</head>
	<body>
		<h1>Test page</h1>
		<p>Blah blah...
		<hr>
		<i>
		Copyright (c) 2000 <a href="http://www.acmee.com">Acmee Inc</a>,
		<br>
		All Rights Reserved.
		</i>
	</body>
</html>

##  联合使用指令

在页面也可以多次使用指令，而且指令间可以相互嵌套，正如在 HTML 元素中嵌套使用 标签一样。
下面的代码会遍历动物集合，用大号字体来打印大型动物的名字。

<p>We have these animals:
	<table border=1>
		<tr><th>Name<th>Price
	<#list animals as being>
		<tr>
		<td>
	<#if being.size == "large"><font  size="+1"></#if>
		${being.name}
	<#if being.size == "large"></font></#if>
		<td>${being.price} Euros
	</#list>
</table>

注意到 FreeMarker 并不解析 FTL 标签外的文本，插值和注释，当条件不满足时它也会 忽略所有嵌套的 font 标签。

##  处理不存在的变量

在实际应用中数据模型经常会有可选的变量（也就是说有时可能不存在实际值）。
除了 一些典型的人为原因导致失误，FreeMarker 不能容忍引用不存在的变量，除非明确地告诉它 当变量不存在时如何处理。
这里介绍两种典型的处理方法。

这部分对程序员而言：一个不存在的变量和一个是 null 的变量，对于 FreeMarker来说是一样的，所以这里所指的丢失包含这两种情况。

不论在哪里引用变量，都可以指定一个默认值来避免变量丢失这种情况，通过在变量名 后面跟着一个!和默认值。
就像下面的例子，当 user 从数据模型中丢失时，模板将会将user 的值表示为字符串”Anonymous”。
（若 user 并没有丢失，那么模板就会表现出”Anonymous”不存在一样）：

<h1>Welcome ${user!"Anonymous"}!</h1>

当然也可以在变量名后面通过放置??来询问 FreeMarker 一个变量是否存在。将它和 if
指令合并，那么如果 user 变量不存在的话将会忽略整个问候代码段：

<#if  user??><h1>Welcome ${user}!</h1></#if>

关于多级访问的变量 ，比如 animals.python.price ，
书写代码： animals.python.price!0，
仅当 animals.python 存在而仅仅最后一个子变 量 price可能不存在（这种情况下我们假设价格是 0）。
如果 animals 或者 python不存在，那么模板处理过程将会以“未定义的变量”错误而停止。
为了防止这种情况的发生， 可以这样来书写代码(animals.python.price)!0。
这种情况下当 animals 或 python 不存在时表达式的结果仍然是 0。对于??也是同样用来的处理这种逻辑的：
animals.python.price??对比(animals.python.price)??来看。





