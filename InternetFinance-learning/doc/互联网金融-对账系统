对账系统

在互联网行业中只要涉及到支付，必然就会有对账的需求，几乎所有互联网公司的业务中多多少少的都会涉及到支付，大一点的公司甚至都标配有了自己的第三方支付公司，因此对账具有普遍性。对账系统是支付体系中最重要的一环，也是保证交易、资金安全的最后一道防线。在大多数的互联网公司中，一般都会有独立的对账系统来处理，比如：电商平台、互联网金融、第三方支付公司等。



对账是支付系统中的一环，因此在对账前我们先了解一下相关的业务知识

业务知识

什么是对账

传统的对账就是核对账目，是指在会计核算中，为保证账簿记录正确可靠，对账簿中的有关数据进行检查和核对的工作。在银行或者第三方支付中，对账其实是对一定周期内的交易进行双方确认的过程，一般都是在第二天银行或者第三方支付公司对前一日交易进行清分，生成对账单供平台商户下载，并将应结算款结算给平台商户。在往下一层，在互联网金融行业或者电商行业中，对账其实就是确认在固定周期内和支付提供方（银行和第反方支付）的交易、资金的正确性，保证双方的交易、资金一致正确。

广义的对账，所有跨应用的数据交互，理论上都应该进行对账。所以对账也可以分为信息流对账，资金流对账。信息流对账也一般用在自己内部系统的对账，比如支付系统的支付数据和业务系统的业务数据进行对账，保证资金交易和业务交易的一致性。资金流对账也就是支付系统和银行或者第三方支付系统之间的资金交易对账。

对账方式

单向对账：一般拿第三方支付机构或银行流水，与自己系统进行对账，防止出现掉单问题；
双向对账：两个应用间的流水进行双向核对，如订单与财务系统，既要保证财务系统支付成功的记录，订单系统也是成功的；也要确保订单系统记录成功的记录，财务系统也成功。
我们一般采用双向对账的方式进行对账

对账相关的问题

不同系统日切点不一致问题：滚动对账
差错处理：补账，补偿（退款）

相关概念

轧帐和平帐

每一笔交易，都要做到各参与者的记录能够吻合，没有偏差。对账系统的工作，是发现有差异的记录，即轧帐；然后通过人工或者自动的方式，解决这些差异，即平帐。

长款和漏单

在以平台交易为基准的情况下和银行对账，发现周期内的交易，平台有此订单而第三方支付中没有订单，成为平台长款。平台长款一般是由于用户在支付的时候跨天的情况，比如用户在23:58分创建了订单，在第二天的凌晨00:03分进行了支付。在以银行交易为基准的情况下对账，银行有此订单而平台无此订单，即为平台漏单。平台漏单很少见，一般直接转人工处理。

账户体系

在一般的支付体系中会分为登录账户和支付账户，支付账户指用户在支付系统中用于交易的资金所有者权益的凭证；登录账号指用户在系统中登录的凭证和个人信息。一个用户可以有多个登录账户，一个登录账户可以有多个支付账户，比如零钱账户、储值卡账户等。一般来说，支付账户不会在多个登录账户之间共用。对账的交易一般都是支付账户参与交易。

交易与账户

账户设置，一般是从交易开始的。 交易的实现必须有账户的支持，账户是交易的基本构成元素。 从支付系统的角度，交易中涉及到的资金流是资金从一个账户流向另一个账户。 发起交易的一方，被称之为交易主体，他可以是一个人，也可以是一个机构。

清算和结算

清算主要是指不同银行间的货币收付，可以认为是结算进行之前，发起行和接收行对支付指令的发送、接收、核对确认，其结果是全面交换结算工具和支付信息，并建立最终结算头寸。

结算是指将清算过程产生的待结算头寸分别在发起行、接收行进行相应的会计处理，完成资金转移，并通知收付双方的过程。当前，大多数银行结算业务的完成主要通过两类账户：一是银行间互相开立的代理账户，二是开立在央行、独立金融机构如银联、或者第三方支付机构的账户。

清算：计算各方应收应付钱款的时间与金额。结算：根据清算的结果在指定的时间对各方进行实际的资金转移操作

资金池

用户备付资金（如充值）统一放在企业的银行账户中，企业可以随意支配这些资金，即为资金池。与之对应的是第三方托管，用户备付资金是放在企业在第三方支付机构为用户开设的虚拟账户中，企业无法随意取出这些资金。现在互联网金融全面要求接入银行存管，就是银行会为每个用户创建一个资金账户来保护用户的资金，互联金融公司不能随意划拨这些资金账户中的金额。

对账系统

对账设计



对账系统的设计阶段，将对账系统分为四个模块，每个模块的负责自己的职能。

文件获取模块：下载或者读取各渠道对账文件
文件解析模块：创建不同的解析模板，根据渠道和文件类型获取对应的解析模板进行解析
对账处理模块：对账的业务逻辑处理
差错处理模块：处理差错池中的订单
一般会设计一个定时任务，每天固定的时间点触发，定时驱动调度类分别调用四个模块来处理对账。也有的银行会主动的推送对账单，再通过http回调来触发对账流程。

对账算法

一、流程：

1、从上游渠道（银行、银联等金融机构）获取对账文件，程序逐行解析入库；
2、在程序处理中，以上游对账文件的表为基准，程序逐行读取并与我们系统的交易记录对比账务记录（有账务系统情况下，合理方案应该是于账务记录）对比，查找出差异记录；
3、以我们系统的交易记录对比账务记录为基准，程序逐行读取与上游对账文件对比，查找出差异记录。

二、缺陷：

1、对账过程中查询相关数据，如果数据量巨大，对数据库性能影响较大，而且对账逻辑扩展极为麻烦；
2、逐行比对算法效率较低，但算法上并无好的优化余地。如果采用数据库INTERSECT、MINUS对数据库压力也高； 
3、在业务量大的情况下（例如有上百家上游渠道需要对，每一家都有几十万条交易记录），对账服务器及数据库服务器负荷较高。即便采用读写分离，对账时候使用读库，压力一样很大；
4、导入批量文件，逐行入库效率较为低下（每一次都需要建立网络连接、关闭连接）。

三、改进：

1、涉及网络传输的，尽量采用批量方式操作，减少网络消耗及时间消耗；
2、使用Redis等NOSQL数据库，降低数据库服务器的压力。同时在扩展上也容易，一台Redis服务器不够，可以无限制增加用于对账用的服务器；
3、使用Redis的set集合的sdiff功能，利用Redis sdiff算法的高性能，比对上游记录和我方记录的差异。

对账流程



1、下载对账单

大多数银行都要求接入方提供ftp服务，银行定时将对账单推送到接入方提供的ftp服务器上面；还有一部分银行会提供对账单的下载服务，通过ftp/http的都有，ftp方式居多；另外网银的对账单比较特殊，一般都需要结算登录网银的后台管理系统中，手动下载，结算下载完对账单后在导入到对账系统。

技术实现上可以做成工厂模式，不同的支付渠道有不同的下载类，如果是http接口将文件写入到对账单，如果是ftp服务器，将服务器中的对账单下载到本地带解析的目录中。主要涉及的代码ftp工具类、http(s)工具类，相关IO读写。

技术选型上，HTTP(S)用apache httpclient即可实现链接池和断点续传， FTP也可以使用Apache Commons Net API。 但不管是哪一个，都需要设置重试次数和链接超时间。重试次数和间隔的设置需要小心，重试太频繁，容易把服务器打死.；时间间隔太大，又会阻塞后续处理步骤。5～10分钟是一个合适的重试间隔区间。

2、创建批次

创建批次一方面是为了防止重复对账，另一方面需要在对账结束的时候将对账的结果信息存储到批次中。

3、解析文件

解析文件主要是将下载的对账文件解析成我们可以对账的数据类型并且入库。解析的文件不同渠道有不同的类型，因此也可以设计成不同的解析模板，使用工厂模式将不同格式的文件解析成可以对账的统一数据类型。解析的文件类型一般包括：json、text、cvs、excle等，另外部分银行会对账单做加密或者提供zip打包的格式，这里就需要额外开发zip工具类和加解密工具类进行处理。

对账文件中包含的主要信息有：商户订单号、交易流水号、交易时间、支付时间、付款方、交易金额、交易类型、交易状态这些字段。

4、对账处理

对账处理也是对账的核心逻辑，具体分为以下的几个步骤来实现：

查询平台所有交易成功的订单
查询平台所有的交易订单
查询平台缓存池中的数据
查询银行交易成功的订单
开始以平台的数据为准对账,平台长款记入缓冲池
开始以银行通道的数据为准对账
以平台订单为基准对账逻辑：以平台所有交易成功的订单为基准，遍历银行订单的所有数据，找出订单号相同的订单，对比订单的金额、手续费是否一致。如果一致跳过；如果不一致，平台订单进入差错池；如果在银行订单中没有找到此笔交易，订单进入缓存池，记录平台长款。同时统计对账相关金额和订单数。

以银行订单为基准对账逻辑：以银行的交易数据为基准，遍历所有平台的交易（包括未成功的订单），找出订单号相同但支付状态不一致的订单，在进行对比金额存入差错池。如果没有在平台的交易中找到此订单，再从缓存池中遍历查找，找到对应的平台订单验证金额是否一致，不一致进入差错池。如果在缓存池汇中依然没有找到对应的订单，直接进入差错池，记录平台漏单。同时统计对账相关金额和订单数。

5、对账统计

根据对账处理中，统计的相关信息包括：对账完成时间、对账是否成功、平账的金额和订单数、差错的金额和订单数、缓存池金额和订单数等。

6、差错处理

在一般系统中，差错处理分为两种，一种人工来处理，一种系统自动来处理。

主要有如下情况：

本地未支付，支付渠道已支付。这主要是本地未正确接收到渠道下发的异步通知导致。 一般处理是将本地状态修改为已支付，并做响应的后续处理，比如通知业务方等。

本地已支付，支付渠道已支付，但是金额不同，这个需要人工核查。

本地已支付，但是支付渠道中无记录；或者本地无记录，支付渠道有记录。在排除跨日因素外，这种情况非常少见，需要了解具体原因后做处理。

示例代码

网上的对账系统的开源代码不是很多，但有一家还不错：龙果支付。龙果支付中有比较完整的对账流程，代码中以微信、支付宝的对账单为例写了对账的流程，大家可以参考。



作者：天顺
链接：https://zhuanlan.zhihu.com/p/19828614
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

哥之前有一篇还算比较火的文章，简单给大家介绍了支付系统对账的大致逻辑，但由于这个是简易版本的，所以未很精细地描述实际业务细节。
这一年来，我一直想重构那个答案，但是一直没动力去做，今天借着专栏，先给大家把对账这个事情给拆开好好讲讲。

先谈谈对账本身，如果做到很精细化管理，支付公司的对账通常分为三类：业务对账，资金对账，账单对账。

先说业务对账。

业务对账文件，通常是银行的业务系统（通常是收单）出具，在业务系统日切结束后用以日终同步交易状态的文件。

值得注意的是，不是所有银行的交易都有业务对账文件，通常收单交易业务对账文件会普遍一些。

这个文件内通常包含以下核心内容，以网银为例：

支付公司流水号，银行流水号，金额，状态标识（成功，失败）

前两个用来定位交易，而状态标识用于同步交易单据状态——通常情况下，业务对账就是用来恢复掉单数据的。

对于原交易单据未明确状态的掉单交易，业务对账可以帮助我们更快地明确单据状态。从这个角度来看，业务对账文件是联机交易回执单据的补充，业务对账的明细与交易发生时的银行回执是等价的，目的都是为了明确交易状态以及因此产生的债权债务关系。

对业务来说：业务对账文件=掉单查询回执=联机交易回执

所谓掉单，就是指支付单据处理过程中，由于网络通信异常，服务器并发过多，程序错误等问题导致的报文信息未达的情况。

通俗点说，一笔快捷支付请求，从支付宝发往银行，银行处理，再到银行回执支付宝这个过程，任何一个环节出现了问题，都会导致最后支付宝无法得知最后的支付处理结果。所以极端情况就是银行处理并扣了用户银行卡余额，但是没通知到支付宝，支付宝这边不能给用户处理成功，正好碰上掉单查询接口出点幺蛾子，那这个用户就要急死了。

so，业务对账，对支付公司来说，最重要的价值是用户体验。

tips：由于双方系统间交互都有一堆机制保障各自报文不可篡改不可抵赖，所以日间银行告诉你成功，日终告诉你失败这种情况理论上是不可能发生的。即便真的出了这个问题，你也可以拿着原报文去找他投诉：喂！要不要这样坑爹，这是你的借条。



作者：天顺
链接：https://zhuanlan.zhihu.com/p/19837887
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

如果说业务对账的主要作用是同步双方交易单据状态，明确双方债权债务关系的话，那么资金对账的主要作用是明确在某一个结算周期内，由业务产生结果的债权债务关系的清偿约定。
======================举例子的分割线=====================

那么拗口，啥意思呢？打个比方：

小明问小红借钱，打了好几个借条上面写着“兹有小明，于XXXX日借小红XXX元人民币，复利年化5%”字样，落款是小明的签名。分别编号为a，b，c，d，e，f，g……

这堆借条，明确了“小明欠小红钱”这个生产关系实质，没错，相当于我们之前说的业务对账。

既然借了钱，也写了借条，那么啥时候还钱呢?

小明和小红约定，每个月月初，小明会跟小红确认当月月底会还哪些借条，一样的白纸黑字不可抵赖。内容大致如下：

“2014年8月31日24点前，小明承诺将所欠小红的a,b,c三张借条及其利息，共XXXX元汇入小红银行账户”。画押：小明

大家知道，小明欠小红好多借条，远远不止abc三张。

但欠钱是一回事，啥时候还钱是另一回事，欠你钱不代表我必须一口气还掉。

所以这个月初条款，就是用来明确在8月份这个结算周期内小明与小红债权债务清偿的方案——映射到我们今天谈的内容，它就相当于资金对账在我们业务开展过程中的作用。

======================举例子的分割线=====================

在实际业务过程中，由于交易处理时差，会计日不一致等各种原因，我们会遇到这样的情况：

由于银行会计日切在22点，所以一笔8月27日23点发生的交易在银行看来，是发生在28日的，所以在29日由银行主动清算到支付宝的备付金账户。

又由于银行日切时间是浮动的，且资金清算方案在协议中通常约定以银行为准，所以通常对于收单类交易，支付宝不会自己去掰指头算，今天工行应该给我多少钱，农行该给我多少钱……而是根据银行给的资金文件来明确。（代发类交易不一样，有空细说）

通常资金文件重要字段为：

银行流水号，支付宝流水号，金额，业务类型

大家看到了，资金文件中不包含交易状态这个字段。

因为资金文件中体现的是银行和支付宝之间的资金清偿关系，这些清偿关系产生的前提是业务已实际发生，所以处理失败的交易由于未形成债务清偿的前提条件，就不会出现在资金文件中。（代发类交易有些不一样，有空细讲）

真拗口，啥意思呢，就是说丫的交易都没有成功，给个屁钱，所有给钱的都是成功的，恩，就是这个意思。

账务上通常怎么反映呢？

以充值为例，假设同一个会员同一个银行卡充值三次，a交易100元，b交易200元，c交易300元。

交易成功（业务对账成功）后：

借：XX银行待清算款 600

贷：会员某某账号负债 600

日终银行资金文件来了，里面只包含了a和b两个交易，c估计被丢到下一个会计周期去了。

支付宝账务一看，行吧，两笔就两笔，记账：

借：XX银行当日应清算款 300（意味着银行今天要给我300的欠款）

贷：XX银行待清算款 300

注意：这时候其实XX银行待清算这个科目下，还挂着借方300，意味着除去银行今天要清算给我的钱外，还欠我300

到此，资金对账就结束啦。