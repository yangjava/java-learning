概述
       Spring框架支持事务管理的核心是事务管理器抽象，对于不同的数据访问框架（如Hibernate）通过实现策略接口PlatformTransactionManager，从而能支持各种数据访问框架的事务管理，PlatformTransactionManager接口定义如下：
 
java代码：
Java代码  收藏代码
public interface PlatformTransactionManager {  
       TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;  
       void commit(TransactionStatus status) throws TransactionException;  
       void rollback(TransactionStatus status) throws TransactionException;  
}  
getTransaction()：返回一个已经激活的事务或创建一个新的事务（根据给定的TransactionDefinition类型参数定义的事务属性），返回的是TransactionStatus对象代表了当前事务的状态，其中该方法抛出TransactionException（未检查异常）表示事务由于某种原因失败。
commit()：用于提交TransactionStatus参数代表的事务，具体语义请参考Spring Javadoc；
rollback()：用于回滚TransactionStatus参数代表的事务，具体语义请参考Spring Javadoc。
 
TransactionDefinition接口定义如下：
 
java代码：
Java代码  收藏代码
public interface TransactionDefinition {  
       int getPropagationBehavior();  
       int getIsolationLevel();  
       int getTimeout();  
       boolean isReadOnly();  
       String getName();  
}  
getPropagationBehavior()：返回定义的事务传播行为；
getIsolationLevel()：返回定义的事务隔离级别；
getTimeout()：返回定义的事务超时时间；
isReadOnly()：返回定义的事务是否是只读的；
getName()：返回定义的事务名字。
 
TransactionStatus接口定义如下：
 
java代码：
Java代码  收藏代码
public interface TransactionStatus extends SavepointManager {  
       boolean isNewTransaction();  
       boolean hasSavepoint();  
       void setRollbackOnly();  
       boolean isRollbackOnly();  
       void flush();  
       boolean isCompleted();  
}  
isNewTransaction()：返回当前事务状态是否是新事务；
hasSavepoint()：返回当前事务是否有保存点；
setRollbackOnly()：设置当前事务应该回滚；
isRollbackOnly(()：返回当前事务是否应该回滚；
flush()：用于刷新底层会话中的修改到数据库，一般用于刷新如Hibernate/JPA的会话，可能对如JDBC类型的事务无任何影响；
isCompleted():当前事务否已经完成。
 
9.2.2    内置事务管理器实现
Spring提供了许多内置事务管理器实现：
DataSourceTransactionManager：位于org.springframework.jdbc.datasource包中，数据源事务管理器，提供对单个javax.sql.DataSource事务管理，用于Spring JDBC抽象框架、iBATIS或MyBatis框架的事务管理；
JdoTransactionManager：位于org.springframework.orm.jdo包中，提供对单个javax.jdo.PersistenceManagerFactory事务管理，用于集成JDO框架时的事务管理；
JpaTransactionManager：位于org.springframework.orm.jpa包中，提供对单个javax.persistence.EntityManagerFactory事务支持，用于集成JPA实现框架时的事务管理；
HibernateTransactionManager：位于org.springframework.orm.hibernate3包中，提供对单个org.hibernate.SessionFactory事务支持，用于集成Hibernate框架时的事务管理；该事务管理器只支持Hibernate3+版本，且Spring3.0+版本只支持Hibernate 3.2+版本；
JtaTransactionManager：位于org.springframework.transaction.jta包中，提供对分布式事务管理的支持，并将事务管理委托给Java EE应用服务器事务管理器；
OC4JjtaTransactionManager：位于org.springframework.transaction.jta包中，Spring提供的对OC4J10.1.3+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持；
WebSphereUowTransactionManager：位于org.springframework.transaction.jta包中，Spring提供的对WebSphere 6.0+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持；
WebLogicJtaTransactionManager：位于org.springframework.transaction.jta包中，Spring提供的对WebLogic 8.1+应用服务器事务管理器的适配器，此适配器用于对应用服务器提供的高级事务的支持。
Spring不仅提供这些事务管理器，还提供对如JMS事务管理的管理器等，Spring提供一致的事务抽象如图9-1所示。


图9-1 Spring事务管理器
 
       接下来让我们学习一下如何在Spring配置文件中定义事务管理器：
 
一、声明对本地事务的支持：
a)JDBC及iBATIS、MyBatis框架事务管理器
 
java代码：
Java代码  收藏代码
<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
    <property name="dataSource" ref="dataSource"/>  
</bean>  
 
通过dataSource属性指定需要事务管理的单个javax.sql.DataSource对象。
b)Jdo事务管理器
 
java代码：
Java代码  收藏代码
<bean id="txManager" class="org.springframework.orm.jdo.JdoTransactionManager">  
    <property name="persistenceManagerFactory" ref="persistenceManagerFactory"/>  
</bean>  
 
通过persistenceManagerFactory属性指定需要事务管理的javax.jdo.PersistenceManagerFactory对象。
 
c)Jpa事务管理器
 
java代码：
Java代码  收藏代码
<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
    <property name="entityManagerFactory" ref="entityManagerFactory"/>  
</bean>  
 
通过entityManagerFactory属性指定需要事务管理的javax.persistence.EntityManagerFactory对象。
还需要为entityManagerFactory对象指定jpaDialect属性，该属性所对应的对象指定了如何获取连接对象、开启事务、关闭事务等事务管理相关的行为。
 
java代码：
Java代码  收藏代码
<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">  
        ……  
        <property name="jpaDialect" ref="jpaDialect"/>  
</bean>  
<bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>  
 
 
d)Hibernate事务管理器
 
java代码：
Java代码  收藏代码
<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">  
    <property name="sessionFactory" ref="sessionFactory"/>  
</bean>  
通过entityManagerFactory属性指定需要事务管理的org.hibernate.SessionFactory对象。
 
 
二、Spring对全局事务的支持：
 
a)Jta事务管理器
 
 
java代码：
Java代码  收藏代码
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:jee="http://www.springframework.org/schema/jee"  
    xsi:schemaLocation="  
       http://www.springframework.org/schema/beans  
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
       http://www.springframework.org/schema/jee  
       http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">  
   
  <jee:jndi-lookup id="dataSource" jndi-name="jdbc/test"/>  
  <bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager">  
    <property name="transactionManagerName" value=" java:comp/TransactionManager"/>  
  </bean>  
</beans>  
 
“dataSource”Bean表示从JNDI中获取的数据源，而txManager是JTA事务管理器，其中属性transactionManagerName指定了JTA事务管理器的JNDI名字，从而将事务管理委托给该事务管理器。
 
这只是最简单的配置方式，更复杂的形式请参考Spring Javadoc。
 
在此我们再介绍两个不依赖于应用服务器的开源JTA事务实现：JOTM和Atomikos Transactions Essentials。
JOTM：即基于Java开放事务管理器（Java Open Transaction Manager），实现JTA规范，能够运行在非应用服务器环境中，Web容器或独立Java SE环境，官网地址: http://jotm.objectweb.org/。
Atomikos Transactions Essentials：其为Atomikos开发的事务管理器，该产品属于开源产品，另外还一个商业的Extreme Transactions。官网地址为：http://www.atomikos.com。
对于以上JTA事务管理器使用，本文作者只是做演示使用，如果在实际项目中需要不依赖于应用服务器的JTA事务支持，需详细测试并选择合适的。
 
在本文中将使用Atomikos Transactions Essentials来进行演示JTA事务使用，由于Atomikos对hsqldb分布式支持不是很好，在Atomikos官网中列出如下兼容的数据库：Oracle、Informix、FirstSQL、DB2、MySQL、SQLServer、Sybase，这不代表其他数据库不支持，而是Atomikos团队没完全测试，在此作者决定使用derby内存数据库来演示JTA分布式事务。
 
1、首先准备jar包：
 
1.1、准备derby数据jar包，到下载的spring-framework-3.0.5.RELEASE-dependencies.zip中拷贝如下jar包：
 
com.springsource.org.apache.derby-10.5.1000001.764942.jar
 
1．2、准备Atomikos Transactions Essentials 对JTA事务支持的JTA包，此处使用AtomikosTransactionsEssentials3.5.5版本，到官网下载AtomikosTransactionsEssentials-3.5.5.zip，拷贝如下jar包到类路径：
 
  atomikos-util.jar
  transactions-api.jar
  transactions-essentials-all.jar
  transactions-jdbc.jar
  transactions-jta.jar
  transactions.jar
将如上jar包放在lib\atomikos目录下，并添加到类路径中。
 
2、接下来看一下在Spring中如何配置AtomikosTransactionsEssentials JTA事务：
2.1、配置分布式数据源：
 
java代码：
Java代码  收藏代码
      
<bean id="dataSource1" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
    <property name="uniqueResourceName" value="jdbc/test1"/>  
    <property name="xaDataSourceClassName" value="org.apache.derby.jdbc.EmbeddedXADataSource"/>  
    <property name="poolSize" value="5"/>  
    <property name="xaProperties">  
        <props>  
            <prop key="databaseName">test1</prop>  
            <prop key="createDatabase">create</prop>  
        </props>  
    </property>  
</bean>  
   
<bean id="dataSource2" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
       init-method="init" destroy-method="close">  
    ……  
</bean>  
     在此我们配置两个分布式数据源：使用com.atomikos.jdbc.AtomikosDataSourceBean来配置AtomikosTransactionsEssentials分布式数据源：
uniqueResourceName表示唯一资源名，如有多个数据源不可重复；
xaDataSourceClassName是具体分布式数据源厂商实现；
poolSize是数据连接池大小；
xaProperties属性指定具体厂商数据库属性，如databaseName指定数据库名，createDatabase表示启动derby内嵌数据库时创建databaseName指定的数据库。
 
在此我们还有定义了一个“dataSource2”Bean，其属性和“DataSource1”除以下不一样其他完全一样：
uniqueResourceName：因为不能重复，因此此处使用jdbc/test2；
databaseName：我们需要指定两个数据库，因此此处我们指定为test2。
 
2.2、配置事务管理器：
 
java代码：
Java代码  收藏代码
<bean id="atomikosTransactionManager" class = "com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method = "close">    
      <property name="forceShutdown" value="true"/>    
</bean>    
<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">  </bean>    
   
<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">    
    <property name="transactionManager">    
        <ref bean="atomikosTransactionManager"/>    
    </property>    
    <property name="userTransaction">    
        <ref bean="atomikosUserTransaction"/>    
    </property>    
</bean>     
   
atomikosTransactionManager：定义了AtomikosTransactionsEssentials事务管理器；
atomikosUserTransaction：定义UserTransaction，该Bean是线程安全的；
transactionManager：定义Spring事务管理器，transactionManager属性指定外部事务管理器（真正的事务管理者），使用userTransaction指定UserTransaction，该属性一般用于本地JTA实现，如果使用应用服务器事务管理器，该属性将自动从JNDI获取。
配置完毕，是不是也挺简单的，但是如果确实需要使用JTA事务，请首先选择应用服务器事务管理器，本示例不适合生产环境，如果非要运用到生产环境，可以考虑购买AtomikosTransactionsEssentials商业支持。
 
b)特定服务器事务管理器
Spring还提供了对特定应用服务器事务管理器集成的支持，目前提供对IBM WebSphere、BEA WebLogic、 Oracle OC4J应用服务器高级事务的支持，具体使用请参考Spring Javadoc。
 
 
现在我们已经学习如何配置事务管理器了，但是只有事务管理器Spring能自动进行事务管理吗？当然不能了，这需要我们来控制，目前Spring支持两种事务管理方式：编程式和声明式事务管理。接下来先看一下如何进行编程式事务管理吧。