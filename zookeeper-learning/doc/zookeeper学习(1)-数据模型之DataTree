摘要

dataTree以来的数据结构如下


DataTree的uml结构

在前面的章节已经全部讲过了
本节讲解DataTree，目前讲解DataTree的源码好像特别少下面都是自己的分析
主要讲解

  属性
  内部类 
    ProcessTxnResult
    Counts
  函数
    构造函数
    统计信息相关
    复制状态信息 
    管理配额
    node的增删改查
    处理请求
    序列化与反序列化
    dump相关
    其他
属性

    private static final Logger LOG = LoggerFactory.getLogger(DataTree.class);

    private final ConcurrentHashMap<String, DataNode> nodes =
        new ConcurrentHashMap<String, DataNode>();//绝对path 到 znode的映射表

    private final WatchManager dataWatches = new WatchManager();//内容监听器

    private final WatchManager childWatches = new WatchManager();//子节点监听器

    private static final String rootZookeeper = "/";//ZooKeeper树的根节点

    private static final String procZookeeper = Quotas.procZookeeper;// "/zookeeper"代表配额znode路径

    private static final String procChildZookeeper = procZookeeper.substring(1);//"zookeeper"

    private static final String quotaZookeeper = Quotas.quotaZookeeper;// "/zookeeper/quota"，一个管理配额的节点

    private static final String quotaChildZookeeper = quotaZookeeper
            .substring(procZookeeper.length() + 1); //"zookeeper/quota"

    private final PathTrie pTrie = new PathTrie();//跟踪 dataTree中的PathTrie字典树

    private final Map<Long, HashSet<String>> ephemerals =
        new ConcurrentHashMap<Long, HashSet<String>>();//记录临时节点,key是sessionId，value是这个sessionId涉及到的path

    private final ReferenceCountedACLCache aclCache = new ReferenceCountedACLCache();//记录一个acl列表与一个Long的映射关系

    private DataNode root = new DataNode(null, new byte[0], -1L,
            new StatPersisted());// root

    private DataNode procDataNode = new DataNode(root, new byte[0], -1L,
            new StatPersisted());// 创建"/zookeeper"

    private DataNode quotaDataNode = new DataNode(procDataNode, new byte[0],
            -1L, new StatPersisted()); //创建 "/zookeeper/quota"

    public volatile long lastProcessedZxid = 0;//上次处理的zxid

    int scount;//这个变量并没有实际作用

    public boolean initialized = false;//标记是否初始化
内部类

ProcessTxnResult

记录处理Txn的结果
直接看类图就好了


ProcessTxnResult类图
Counts

private static class Counts {
        long bytes;
        int count;
    }
这个就是用来记录StatsTrack类时(一个节点下面的bytes大小和count数量),实际统计过程中用到的结构体一样的类

函数

构造函数

//构造函数，将root,procDataNode，quotaDataNode记录在map中

    public DataTree() {
        /* Rather than fight it, let root have an alias */
        nodes.put("", root);
        nodes.put(rootZookeeper, root);

        /** add the proc node and quota node */
        root.addChild(procChildZookeeper);
        nodes.put(procZookeeper, procDataNode);

        procDataNode.addChild(quotaChildZookeeper);
        nodes.put(quotaZookeeper, quotaDataNode);
    }
统计信息相关

//根据sessionId得到它创建的临时path列表

    public HashSet<String> getEphemerals(long sessionId) {
        HashSet<String> retv = ephemerals.get(sessionId);
        if (retv == null) {
            return new HashSet<String>();
        }
        HashSet<String> cloned = null;
        synchronized (retv) {
            cloned = (HashSet<String>) retv.clone();
        }
        return cloned;
    }
//获取整个临时会话记录

    public Map<Long, HashSet<String>> getEphemeralsMap() {
        return ephemerals;
    }
//返回有临时节点的session集合

    public Collection<Long> getSessions() {
        return ephemerals.keySet();
    }
//根据path拿到node

    public DataNode getNode(String path) {
        return nodes.get(path);
    }
//获取nodes个数

    public int getNodeCount() {
        return nodes.size();
    }
//获取watches的数量

    public int getWatchCount() {
        return dataWatches.size() + childWatches.size();
    }
//获取临时节点个数

    public int getEphemeralsCount() {
        Map<Long, HashSet<String>> map = this.getEphemeralsMap();
        int result = 0;
        for (HashSet<String> set : map.values()) {//遍历每个session对应的临时节点集合
            result += set.size();
        }
        return result;
    }
//获取一个所有path存储内容的大小总和

    public long approximateDataSize() {
        long result = 0;
        for (Map.Entry<String, DataNode> entry : nodes.entrySet()) {
            DataNode value = entry.getValue();
            synchronized (value) {
                result += entry.getKey().length();
                result += (value.data == null ? 0
                        : value.data.length);
            }
        }
        return result;
    }
//是否是特殊路径

    boolean isSpecialPath(String path) {
        if (rootZookeeper.equals(path) || procZookeeper.equals(path)
                || quotaZookeeper.equals(path)) {
            return true;
        }
        return false;
    }
获取acl cache的大小

    public int aclCacheSize() {
        return aclCache.size();
    }
复制状态信息

    static public void copyStatPersisted(StatPersisted from, StatPersisted to) {
        to.setAversion(from.getAversion());
        to.setCtime(from.getCtime());
        to.setCversion(from.getCversion());
        to.setCzxid(from.getCzxid());
        to.setMtime(from.getMtime());
        to.setMzxid(from.getMzxid());
        to.setPzxid(from.getPzxid());
        to.setVersion(from.getVersion());
        to.setEphemeralOwner(from.getEphemeralOwner());
    }

    static public void copyStat(Stat from, Stat to) {
        to.setAversion(from.getAversion());
        to.setCtime(from.getCtime());
        to.setCversion(from.getCversion());
        to.setCzxid(from.getCzxid());
        to.setMtime(from.getMtime());
        to.setMzxid(from.getMzxid());
        to.setPzxid(from.getPzxid());
        to.setVersion(from.getVersion());
        to.setEphemeralOwner(from.getEphemeralOwner());
        to.setDataLength(from.getDataLength());
        to.setNumChildren(from.getNumChildren());
    }
管理配额

管理count数量

    //根据有配额限制的最近祖先节点，更新count数量
    public void updateCount(String lastPrefix, int diff) {
        String statNode = Quotas.statPath(lastPrefix);//获取对应的stat路径
        DataNode node = nodes.get(statNode);//找到对应stat的节点
        StatsTrack updatedStat = null;
        if (node == null) {
            // should not happen
            LOG.error("Missing count node for stat " + statNode);
            return;
        }
        synchronized (node) {
            updatedStat = new StatsTrack(new String(node.data));
            updatedStat.setCount(updatedStat.getCount() + diff);//更新count数量
            node.data = updatedStat.toString().getBytes();//更新Stat节点的内容(下次调用toString时就是更新后的信息)
        }
        // now check if the counts match the quota
        String quotaNode = Quotas.quotaPath(lastPrefix);//获取对应的quota配额路径
        node = nodes.get(quotaNode);//获取对应的quota节点
        StatsTrack thisStats = null;
        if (node == null) {
            // should not happen
            LOG.error("Missing count node for quota " + quotaNode);
            return;
        }
        synchronized (node) {
            thisStats = new StatsTrack(new String(node.data));
        }
        //针对count要求,如果quota要求的配额 小于 实际stat的配额，则warning
        if (thisStats.getCount() > -1 && (thisStats.getCount() < updatedStat.getCount())) {
            LOG
            .warn("Quota exceeded: " + lastPrefix + " count="
                    + updatedStat.getCount() + " limit="
                    + thisStats.getCount());
        }
    }
管理bytes大小

    //根据有配额限制的最近祖先节点，更新bytes大小
    public void updateBytes(String lastPrefix, long diff) {
        String statNode = Quotas.statPath(lastPrefix);//获取对应的stat路径
        DataNode node = nodes.get(statNode);//找到对应stat的节点
        if (node == null) {
            // should never be null but just to make
            // findbugs happy
            LOG.error("Missing stat node for bytes " + statNode);
            return;
        }
        StatsTrack updatedStat = null;
        synchronized (node) {
            updatedStat = new StatsTrack(new String(node.data));
            updatedStat.setBytes(updatedStat.getBytes() + diff);//更新bytes长度大小
            node.data = updatedStat.toString().getBytes();//更新Stat节点的内容(下次调用toString时就是更新后的信息)
        }
        // now check if the bytes match the quota
        String quotaNode = Quotas.quotaPath(lastPrefix);//获取对应的quota配额路径
        node = nodes.get(quotaNode);//获取对应的quota节点
        if (node == null) {
            // should never be null but just to make
            // findbugs happy
            LOG.error("Missing quota node for bytes " + quotaNode);
            return;
        }
        StatsTrack thisStats = null;
        synchronized (node) {
            thisStats = new StatsTrack(new String(node.data));
        }
        //针对bytes要求,如果quota要求的配额 小于 实际的配额，则warning
        if (thisStats.getBytes() > -1 && (thisStats.getBytes() < updatedStat.getBytes())) {
            LOG
            .warn("Quota exceeded: " + lastPrefix + " bytes="
                    + updatedStat.getBytes() + " limit="
                    + thisStats.getBytes());
        }
    }
获取字典树中最近的带有配额限制的祖先节点的路径

    //根据一个绝对路径找到pTrie中带有配额限制的最近的祖先
    public String getMaxPrefixWithQuota(String path) {
        // do nothing for the root.
        // we are not keeping a quota on the zookeeper
        // root node for now.
        String lastPrefix = pTrie.findMaxPrefix(path);//找到pTrie最近的带有配额要求标记的path

        if (!rootZookeeper.equals(lastPrefix) && !("".equals(lastPrefix))) {
            return lastPrefix;//如果是合理的在pTrie中的path
        }
        else {
            return null;
        }
    }
更新一个子树下所有节点的实际占用count数量和bytes大小,结果记录在Count内部类中

    private void getCounts(String path, Counts counts) {//深度优先搜索统计一个子数下的count个数和byte大小(实际大小)
        DataNode node = getNode(path);
        if (node == null) {
            return;
        }
        String[] children = null;
        int len = 0;
        synchronized (node) {
            Set<String> childs = node.getChildren();
            if (childs != null) {
                children = childs.toArray(new String[childs.size()]);
            }
            len = (node.data == null ? 0 : node.data.length);
        }
        // add itself
        counts.count += 1;
        counts.bytes += len;//把当前节点的count以及bytes记录累计上去
        if (children == null || children.length == 0) {
            return;
        }
        for (String child : children) {
            getCounts(path + "/" + child, counts);//遍历每一个子节点
        }
    }
更新一个子树下所有节点的实际占用count数量和bytes大小,结果记录在path对应的StatsTrack的node中

    private void updateQuotaForPath(String path) {//更新一个path实际用到的count个数和byte大小
        Counts c = new Counts();
        getCounts(path, c);//递归的获取这个path的子数下的count个数以及byte大小
        StatsTrack strack = new StatsTrack();
        strack.setBytes(c.bytes);
        strack.setCount(c.count);
        String statPath = Quotas.quotaZookeeper + path + "/" + Quotas.statNode;
        DataNode node = getNode(statPath);
        // it should exist
        if (node == null) {
            LOG.warn("Missing quota stat node " + statPath);
            return;
        }
        synchronized (node) {
            node.data = strack.toString().getBytes();
        }
    }
node的增删改查

创建node

    public String createNode(String path, byte data[], List<ACL> acl,
            long ephemeralOwner, int parentCVersion, long zxid, long time)
            throws KeeperException.NoNodeException,
            KeeperException.NodeExistsException {
        int lastSlash = path.lastIndexOf('/');
        String parentName = path.substring(0, lastSlash);
        String childName = path.substring(lastSlash + 1);
        StatPersisted stat = new StatPersisted();
        stat.setCtime(time);
        stat.setMtime(time);
        stat.setCzxid(zxid);
        stat.setMzxid(zxid);
        stat.setPzxid(zxid);
        stat.setVersion(0);//内容版本
        stat.setAversion(0);//acl版本
        stat.setEphemeralOwner(ephemeralOwner);
        DataNode parent = nodes.get(parentName);
        if (parent == null) {
            throw new KeeperException.NoNodeException();
        }
        synchronized (parent) {
            Set<String> children = parent.getChildren();
            if (children != null) {
                if (children.contains(childName)) {//创建一个已经存在的节点
                    throw new KeeperException.NodeExistsException();
                }
            }

            if (parentCVersion == -1) {
                parentCVersion = parent.stat.getCversion();
                parentCVersion++;
            }    
            parent.stat.setCversion(parentCVersion);//父节点的cversion+1(child version)
            parent.stat.setPzxid(zxid);//父节点的Pzxid更新(子节点列表变化的zxid)
            Long longval = aclCache.convertAcls(acl);//找到ACL列表对应的Long值
            DataNode child = new DataNode(parent, data, longval, stat);//生成child node
            parent.addChild(childName);//父节点增加子节点
            nodes.put(path, child);//记录在nodes这个map中
            if (ephemeralOwner != 0) {//如果是临时的
                HashSet<String> list = ephemerals.get(ephemeralOwner);
                if (list == null) {
                    list = new HashSet<String>();
                    ephemerals.put(ephemeralOwner, list);
                }
                synchronized (list) {
                    list.add(path);//在ephemerals对应的sessionId中添加一条path的记录
                }
            }
        }
        // now check if its one of the zookeeper node child
        if (parentName.startsWith(quotaZookeeper)) {
            // now check if its the limit node
            if (Quotas.limitNode.equals(childName)) {//如果是新增配额节点
                // this is the limit node
                // get the parent and add it to the trie
                pTrie.addPath(parentName.substring(quotaZookeeper.length()));
            }
            if (Quotas.statNode.equals(childName)) {//如果是新增状态节点
                updateQuotaForPath(parentName
                        .substring(quotaZookeeper.length()));//更新这个path对应的子数下实际的count个数和byte大小
            }
        }
        // also check to update the quotas for this node
        String lastPrefix;
        if((lastPrefix = getMaxPrefixWithQuota(path)) != null) {//找到Trie中最近的带有配额要求的路径
            // ok we have some match and need to update
            updateCount(lastPrefix, 1);//该path对应的child+1
            updateBytes(lastPrefix, data == null ? 0 : data.length);//该path对应的bytes大小进行对应变化
        }
        dataWatches.triggerWatch(path, Event.EventType.NodeCreated);//触发在该path上的监听器，通知类型为NodeCreated
        childWatches.triggerWatch(parentName.equals("") ? "/" : parentName,
                Event.EventType.NodeChildrenChanged);//触发parent上的监听器，通知类型为NodeChildrenChanged
        return path;
    }
删除node

    public void deleteNode(String path, long zxid)
            throws KeeperException.NoNodeException {
        int lastSlash = path.lastIndexOf('/');
        String parentName = path.substring(0, lastSlash);
        String childName = path.substring(lastSlash + 1);
        DataNode node = nodes.get(path);
        if (node == null) {//删除的节点不存在
            throw new KeeperException.NoNodeException();
        }
        nodes.remove(path);//从map中剔除相关记录
        synchronized (node) {
            aclCache.removeUsage(node.acl);//对应的acl列表的引用次数-1
        }
        DataNode parent = nodes.get(parentName);
        if (parent == null) {//parent节点不存在
            throw new KeeperException.NoNodeException();
        }
        synchronized (parent) {
            parent.removeChild(childName);//parent的DataNode进行相应操作
            parent.stat.setPzxid(zxid);
            long eowner = node.stat.getEphemeralOwner();
            if (eowner != 0) {//如果当前节点是临时节点
                HashSet<String> nodes = ephemerals.get(eowner);
                if (nodes != null) {
                    synchronized (nodes) {
                        nodes.remove(path);//ephemerals对应sessionId的记录，删掉这个path
                    }
                }
            }
            node.parent = null;
        }
        if (parentName.startsWith(procZookeeper)) {
            // delete the node in the trie.
            if (Quotas.limitNode.equals(childName)) {//如果删除的是一个配额限制的节点
                // we need to update the trie
                // as well
                pTrie.deletePath(parentName.substring(quotaZookeeper.length()));
            }
        }

        // also check to update the quotas for this node
        String lastPrefix;
        if((lastPrefix = getMaxPrefixWithQuota(path)) != null) {//找到Trie中最近的带有配额要求的路径
            // ok we have some match and need to update
            updateCount(lastPrefix, -1);//count数-1
            int bytes = 0;
            synchronized (node) {
                bytes = (node.data == null ? 0 : -(node.data.length));
            }
            updateBytes(lastPrefix, bytes);//bytes大小进行对应变化
        }
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(LOG, ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                    "dataWatches.triggerWatch " + path);
            ZooTrace.logTraceMessage(LOG, ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                    "childWatches.triggerWatch " + parentName);
        }
        Set<Watcher> processed = dataWatches.triggerWatch(path,
                EventType.NodeDeleted);
        childWatches.triggerWatch(path, EventType.NodeDeleted, processed);//childWatches还负责处理NodeDeleted事件???
        childWatches.triggerWatch(parentName.equals("") ? "/" : parentName,
                EventType.NodeChildrenChanged);
    }
设置节点内容

    public Stat setData(String path, byte data[], int version, long zxid,
            long time) throws KeeperException.NoNodeException {
        Stat s = new Stat();
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        byte lastdata[] = null;
        synchronized (n) {
            lastdata = n.data;//记住原有的lastdata
            n.data = data;
            n.stat.setMtime(time);
            n.stat.setMzxid(zxid);
            n.stat.setVersion(version);
            n.copyStat(s);//记录新的Stat s
        }
        // now update if the path is in a quota subtree.
        String lastPrefix;
        if((lastPrefix = getMaxPrefixWithQuota(path)) != null) {//找到Trie中最近的带有配额要求的路径
          this.updateBytes(lastPrefix, (data == null ? 0 : data.length)
              - (lastdata == null ? 0 : lastdata.length));//更新bytes diff的大小为 (现有大小 - 原有大小)
        }
        dataWatches.triggerWatch(path, EventType.NodeDataChanged);//触发dataWatches的NodeDataChanged事件
        return s;
    }
获取内容并且注册watcher

    public byte[] getData(String path, Stat stat, Watcher watcher)
            throws KeeperException.NoNodeException {
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        synchronized (n) {
            n.copyStat(stat);
            if (watcher != null) {
                dataWatches.addWatch(path, watcher);//注册watcher到dataWatches
            }
            return n.data;//返回byte[]
        }
    }
获取node状态并且注册watcher

    public Stat statNode(String path, Watcher watcher)
            throws KeeperException.NoNodeException {
        Stat stat = new Stat();
        DataNode n = nodes.get(path);
        if (watcher != null) {
            dataWatches.addWatch(path, watcher);
        }
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        synchronized (n) {
            n.copyStat(stat);//复制一份 返回
            return stat;
        }
    }
获取child列表并且注册watcher

    public List<String> getChildren(String path, Stat stat, Watcher watcher)
            throws KeeperException.NoNodeException {
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        synchronized (n) {
            if (stat != null) {
                n.copyStat(stat);//复制一份stat
            }
            ArrayList<String> children;
            Set<String> childs = n.getChildren();
            if (childs != null) {
                children = new ArrayList<String>(childs.size());
                children.addAll(childs);//有children就返回children
            } else {
                children = new ArrayList<String>(0);
            }

            if (watcher != null) {
                childWatches.addWatch(path, watcher);//添加childWatches
            }
            return children;
        }
    }
设置node的acl

    public Stat setACL(String path, List<ACL> acl, int version)
            throws KeeperException.NoNodeException {
        Stat stat = new Stat();
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        synchronized (n) {
            aclCache.removeUsage(n.acl);//原有acl引用次数-1
            n.stat.setAversion(version);
            n.acl = aclCache.convertAcls(acl);//得到新的acl列表对应的long
            n.copyStat(stat);
            return stat;
        }
    }
根据路径获取对应节点的acl列表

    public List<ACL> getACL(String path, Stat stat)
            throws KeeperException.NoNodeException {
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        synchronized (n) {
            n.copyStat(stat);
            return new ArrayList<ACL>(aclCache.convertLong(n.acl));
        }
    }
根据node获取其acl列表,这里有两个版本

    public List<ACL> getACL(DataNode node) {
        synchronized (node) {
            return aclCache.convertLong(node.acl);
        }
    }

    public Long getACL(DataNodeV1 oldDataNode) {
        synchronized (oldDataNode) {
            return aclCache.convertAcls(oldDataNode.acl);
        }
    }
处理请求

processTxn函数，主要是根据不同的请求头，区分请求类型，是create还是set等等
然后根据处理结果返回ProcessTxnResult
代码太长了这里不贴出来

序列化与反序列化

//遍历quota下的path,然后统计对应实际用到的bytes大小和count数量

    private void traverseNode(String path) {
        DataNode node = getNode(path);
        String children[] = null;
        synchronized (node) {
            Set<String> childs = node.getChildren();
            if (childs != null) {
                children = childs.toArray(new String[childs.size()]);
            }
        }
        if (children == null || children.length == 0) {
            // this node does not have a child
            // is the leaf node
            // check if its the leaf node
            String endString = "/" + Quotas.limitNode;
            if (path.endsWith(endString)) {
                // ok this is the limit node
                // get the real node and update
                // the count and the bytes
                String realPath = path.substring(Quotas.quotaZookeeper
                        .length(), path.indexOf(endString));
                updateQuotaForPath(realPath);//统计对应实际用到的bytes大小和count数量
                this.pTrie.addPath(realPath);
            }
            return;
        }
        for (String child : children) {
            traverseNode(path + "/" + child);
        }
    }
//安装pTrie,并且遍历,统计对应实际用量

private void setupQuota() {
        String quotaPath = Quotas.quotaZookeeper;
        DataNode node = getNode(quotaPath);
        if (node == null) {
            return;
        }
        traverseNode(quotaPath);
    }
序列化一个节点

    //递归遍历path下所有节点，将结果写入oa中
    void serializeNode(OutputArchive oa, StringBuilder path) throws IOException {
        String pathString = path.toString();
        DataNode node = getNode(pathString);//根据path找到对应DataNode
        if (node == null) {
            return;
        }
        String children[] = null;
        DataNode nodeCopy;
        synchronized (node) {
            scount++;
            StatPersisted statCopy = new StatPersisted();
            copyStatPersisted(node.stat, statCopy);
            //we do not need to make a copy of node.data because the contents
            //are never changed
            nodeCopy = new DataNode(node.parent, node.data, node.acl, statCopy);
            Set<String> childs = node.getChildren();//找到对应的child列表
            if (childs != null) {
                children = childs.toArray(new String[childs.size()]);
            }
        }
        oa.writeString(pathString, "path");
        oa.writeRecord(nodeCopy, "node");
        path.append('/');
        int off = path.length();
        if (children != null) {
            for (String child : children) {
                // since this is single buffer being resused
                // we need
                // to truncate the previous bytes of string.
                path.delete(off, Integer.MAX_VALUE);
                path.append(child);
                serializeNode(oa, path);//接着序列化子节点
            }
        }
    }
序列化整棵树

    //从空字符串的路径开始序列化整个数据树，并采用深度优先算法依次调用 serializeNode 方法来序列化每一个节点:
    public void serialize(OutputArchive oa, String tag) throws IOException {
        scount = 0;
        aclCache.serialize(oa);
        serializeNode(oa, new StringBuilder(""));//从根节点开始，调用serializeNode开始遍历
        // / marks end of stream
        // we need to check if clear had been called in between the snapshot.
        if (root != null) {
            oa.writeString("/", "path");
        }
    }
//反序列化，清空所有的map等

    public void deserialize(InputArchive ia, String tag) throws IOException {
        aclCache.deserialize(ia);
        nodes.clear();
        pTrie.clear();
        String path = ia.readString("path");
        while (!path.equals("/")) {
            DataNode node = new DataNode();
            ia.readRecord(node, "node");
            nodes.put(path, node);
            synchronized (node) {
                aclCache.addUsage(node.acl);
            }
            int lastSlash = path.lastIndexOf('/');
            if (lastSlash == -1) {
                root = node;
            } else {
                String parentPath = path.substring(0, lastSlash);
                node.parent = nodes.get(parentPath);
                if (node.parent == null) {
                    throw new IOException("Invalid Datatree, unable to find " +
                            "parent " + parentPath + " of path " + path);
                }
                node.parent.addChild(path.substring(lastSlash + 1));
                long eowner = node.stat.getEphemeralOwner();
                if (eowner != 0) {
                    HashSet<String> list = ephemerals.get(eowner);
                    if (list == null) {
                        list = new HashSet<String>();
                        ephemerals.put(eowner, list);
                    }
                    list.add(path);
                }
            }
            path = ia.readString("path");
        }
        nodes.put("/", root);
        // we are done with deserializing the
        // the datatree
        // update the quotas - create path trie
        // and also update the stat nodes
        setupQuota();

        aclCache.purgeUnused();
    }
dump相关

    /**
     * Summary of the watches on the datatree.
     * @param pwriter the output to write to
     */
    public synchronized void dumpWatchesSummary(PrintWriter pwriter) {
        pwriter.print(dataWatches.toString());
    }

    /**
     * Write a text dump of all the watches on the datatree.
     * Warning, this is expensive, use sparingly!
     * @param pwriter the output to write to
     */
    public synchronized void dumpWatches(PrintWriter pwriter, boolean byPath) {
        dataWatches.dumpWatches(pwriter, byPath);
    }

    /**
     * Write a text dump of all the ephemerals in the datatree.
     * @param pwriter the output to write to
     */
    public void dumpEphemerals(PrintWriter pwriter) {
        Set<Long> keys = ephemerals.keySet();
        pwriter.println("Sessions with Ephemerals ("
                + keys.size() + "):");
        for (long k : keys) {
            pwriter.print("0x" + Long.toHexString(k));
            pwriter.println(":");
            HashSet<String> tmp = ephemerals.get(k);
            if (tmp != null) {
                synchronized (tmp) {
                    for (String path : tmp) {
                        pwriter.println("\t" + path);
                    }
                }
            }
        }
    }
其他

//记录path对应的znode

    public void addDataNode(String path, DataNode node) {
        nodes.put(path, node);
    }
//把一个临时会话的session给kill掉

    void killSession(long session, long zxid) {
        // the list is already removed from the ephemerals
        // so we do not have to worry about synchronizing on
        // the list. This is only called from FinalRequestProcessor
        // so there is no need for synchronization. The list is not
        // changed here. Only create and delete change the list which
        // are again called from FinalRequestProcessor in sequence.
        HashSet<String> list = ephemerals.remove(session);
        if (list != null) {
            for (String path : list) {
                try {
                    deleteNode(path, zxid);
                    if (LOG.isDebugEnabled()) {
                        LOG
                                .debug("Deleting ephemeral node " + path
                                        + " for session 0x"
                                        + Long.toHexString(session));
                    }
                } catch (NoNodeException e) {
                    LOG.warn("Ignoring NoNodeException for path " + path
                            + " while removing ephemeral for dead session 0x"
                            + Long.toHexString(session));
                }
            }
        }
    }
//清除一个watcher

    public void removeCnxn(Watcher watcher) {
        dataWatches.removeWatcher(watcher);
        childWatches.removeWatcher(watcher);
    }
//清空所有数据，并没有被调用

    public void clear() {
        root = null;
        nodes.clear();
        ephemerals.clear();
    }
//设置watcher

    public void setWatches(long relativeZxid, List<String> dataWatches,
            List<String> existWatches, List<String> childWatches,
            Watcher watcher) {
        for (String path : dataWatches) {
            DataNode node = getNode(path);
            if (node == null) {
                watcher.process(new WatchedEvent(EventType.NodeDeleted,
                            KeeperState.SyncConnected, path));
            } else if (node.stat.getMzxid() > relativeZxid) {
                watcher.process(new WatchedEvent(EventType.NodeDataChanged,
                            KeeperState.SyncConnected, path));
            } else {
                this.dataWatches.addWatch(path, watcher);
            }
        }
        for (String path : existWatches) {
            DataNode node = getNode(path);
            if (node != null) {
                watcher.process(new WatchedEvent(EventType.NodeCreated,
                            KeeperState.SyncConnected, path));
            } else {
                this.dataWatches.addWatch(path, watcher);
            }
        }
        for (String path : childWatches) {
            DataNode node = getNode(path);
            if (node == null) {
                watcher.process(new WatchedEvent(EventType.NodeDeleted,
                            KeeperState.SyncConnected, path));
            } else if (node.stat.getPzxid() > relativeZxid) {
                watcher.process(new WatchedEvent(EventType.NodeChildrenChanged,
                            KeeperState.SyncConnected, path));
            } else {
                this.childWatches.addWatch(path, watcher);
            }
        }
    }
//设置新的Cversion和parent的zxid,确保path参数是parent的path

    public void setCversionPzxid(String path, int newCversion, long zxid)
        throws KeeperException.NoNodeException {
        if (path.endsWith("/")) {
           path = path.substring(0, path.length() - 1);
        }
        DataNode node = nodes.get(path);
        if (node == null) {
            throw new KeeperException.NoNodeException(path);
        }
        synchronized (node) {
            if(newCversion == -1) {
                newCversion = node.stat.getCversion() + 1;
            }
            if (newCversion > node.stat.getCversion()) {
                node.stat.setCversion(newCversion);
                node.stat.setPzxid(zxid);
            }
        }
    }
思考

这里的配额管理，超过要求，限制了会怎么样

如果stat超过了quotas要求,就会waring，并不是真正的限制.
感觉在实际应用中没什么用，最多加个log报警，相关代码还特别长。

问题

意义

这个类太长了，有些函数并不是很清楚它的意义,
比如DataTree#setWatches,要了解整个机制才会清楚各个函数的调用

ProcessTxnResult

ProcessTxnResult返回后又是如何利用的

