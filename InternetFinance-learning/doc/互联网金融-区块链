最近在研究区块链。打算先搭建一个测试环境开始运行。这里记录整个搭建过程，供后来人参考。 整体上，分为三个步骤，安装相关软件，初始化系统，建立集群，以及最后一步，挖矿。 我们采用的是以太坊，相对其他区块链，这是一个成熟的环境。 虽然近期有硬分支的事件，对企业应用来说，功能上还算是比较完善的。

安装部署
1.安装 Go 环境
如果机器无法上外网，还得配置一下代理。 Ubuntu配置代理的方式网上很多，这里不介绍。

  curl -O https://storage.googleapis.com/golang/go1.5.1.linux-amd64.tar.gz
  tar -C /usr/local -xzf go1.5.1.linux-amd64.tar.gz
  mkdir -p ~/go; echo "export GOPATH=$HOME/go" >> ~/.bashrc
  echo "export PATH=$PATH:$HOME/go/bin:/usr/local/go/bin" >> ~/.bashrc
  source ~/.bashrc
2.安装 ethereum
  sudo apt-get install software-properties-common
  sudo add-apt-repository -y ppa:ethereum/ethereum
  sudo add-apt-repository -y ppa:ethereum/ethereum-dev
  sudo apt-get update
  sudo apt-get install ethereum
在执行 sudo add-apt-repository -y ppa:ethereum/ethereum的时候碰到这个问题：

  root@ubuntu-KVM:~# sudo add-apt-repository -y ppa:ethereum/ethereum
  Cannot add PPA: 'ppa:ethereum/ethereum'.
   Please check that the PPA name or format is correct.
按照Ask Ubuntu 的意见，修改为：

  sudo apt-get install software-properties-common
  sudo -E add-apt-repository -y ppa:ethereum/ethereum
  sudo -E add-apt-repository -y ppa:ethereum/ethereum-dev
  sudo apt-get update
  sudo apt-get install ethereum
3.安装 solc 编译器

  sudo add-apt-repository ppa:ethereum/ethereum-qt
  sudo add-apt-repository ppa:ethereum/ethereum
  sudo apt-get update
  sudo apt-get install cpp-ethereum

同样的，如果碰到PPA Name错误的警示，则执行如下操作：


  sudo -E add-apt-repository ppa:ethereum/ethereum-qt
  sudo -E add-apt-repository ppa:ethereum/ethereum
  sudo apt-get update
  sudo apt-get install cpp-ethereum

这样相关软件已经安装完毕。

搭建私链
1.启动geth服务

  geth --datadir "/root/chain" console

其中 datadir用于指定数据目录。这个目录不能够预先创建，否则命令会失败。 执行结果如下：

Image of Start Geth

2.创建账号
执行之后，进入geth的交互模式。 接着建立一个账号，然后退出。 这个账号用于执行创世操作。 然后exit退出

> personal.newAccount("密码");
 "0xea5c99831c2e4a0e094facdbac1befcf6c92e543"
> exit
3.创建创世区块
编译创建创世区块所需要的脚本， 注意alloc下的key需要和上述的账号保持一致。

  {
  "alloc": {
      "0xea5c99831c2e4a0e094facdbac1befcf6c92e543": {
      "balance": "1000"
    }
  },
 
  "nonce": "0x0000000000000042",
  "difficulty": "0x020000",
  "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "coinbase": "0x0000000000000000000000000000000000000000",
  "timestamp": "0x00",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "extraData": "CNNMoney Jack Ma interview: Wars start when trade stops, 20160902",
  "gasLimit": "0xffffffff"
  }
各个参数的含义如下：

mixhash：与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意他和nonce的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。.
nonce: nonce就是一个64位随机数，用于挖矿，注意他和mixhash的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。
difficulty: 设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度
alloc: 用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以。
coinbase: 矿工的账号，随便填
timestamp: 设置创世块的时间戳
parentHash: 上一个区块的hash值，因为是创世块，所以这个值是0
extraData: 附加信息，随便填，可以填你的个性信息
gasLimit: 该值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。
创建数据存放地址并初始化创世块

geth  --datadir "/root/chain" init genesis.json 
执行结果如下： Image of creating genesis 

4.启动私链
执行如下脚本

geth --identity "phoenix"  --rpc  --rpccorsdomain "*" --datadir "/root/chain" --port "30303"  --rpcapi "db,eth,net,web3" --networkid 98888 console
各参数说明如下：

identity ：区块链的标示，随便填写，用于标示目前网络的名字
init ：指定创世块文件的位置，并创建初始块
datadir ：设置当前区块链网络数据存放的位置
port：网络监听端口,默认是8080
rpc：启动rpc通信，可以进行智能合约的部署和调试。它在geth中通常被默认激活。
rpcapi： 设置允许连接的rpc的客户端，一般为db,eth,net,web3
networkid： 设置当前区块链的网络ID，用于区分不同的网络，是一个数字
console：启动命令行模式，可以在Geth中执行命令
此外，还可以使用如下参数：

nodiscover : 使用这个命令可以确保你的节点不会被非手动添加你的人发现。否则，你的节点可能被陌生人的区块链无意添加，如果他和你有相同的初始文件和网络ID。
maxpeers : 如果你不希望其他人连接到你的测试链，可以使用maxpeers 0。反之，如果你确切知道希望多少人连接到你的节点，你也可以通过调整数字来实现。
rpcapi : 这个命令可以决定允许什么API通过RPC进入。在默认情况下，geth可以在RPC激活web3界面。请注意在RPC/IPC界面提供API，会使每个可以进入这个界面（例如dapp’s）的人都有权限访问这个API。注意你激活的是哪个API。Geth会默认激活IPC界面上所有的API，以及RPC界面上的db,eth,net和web3 API。
rpccorsdomain : 这个可以指示什么URL能连接到你的节点来执行RPC定制端任务。务必谨慎，输入一个特定的URL而不是wildcard ( * )，后者会使所有的URL都能连接到你的RPC实例。
启动后界面如下，光标停留在最后的命令行上，可以执行以太坊命令。 可以看到Listening on [::]:30303和Welcome to the Geth JavaScript console!的提示，说明已经启动成功

注意：如果想将Ubuntu作为永久区块链节点使用，当使用nohup命令时，Geth启动参数console必须去掉，否则Geth会自动停止。
执行结果如下： Image of startup 

5.查看节点信息
常用命令：

net.listening：查看网络是否在监听；
admin.peers: 查看当前连接的节点。 目前还是空的。
admin.nodeInfo：查看当前节点的信息。
执行：

> admin.nodeInfo
得到当前节点信息如下：


{
  enode: "enode://dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094@[::]:30303",
  id: "dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094",
  ip: "::",
  listenAddr: "[::]:30303",
  name: "Geth/v1.5.0-unstable/linux/go1.5.1/phoenix",
  ports: {
    discovery: 30303,
    listener: 30303
  },
  protocols: {
    eth: {
      difficulty: 131072,
      genesis: "0xaab381212b8108c488c8d21c06042a9081b94bfb87665110520d3c295626e79b",
      head: "0xaab381212b8108c488c8d21c06042a9081b94bfb87665110520d3c295626e79b",
      network: 98888
    }
  }
}

注意enode节点，这是当前节点的标识。 后续会用到这个值。

6.查看账户信息
在创建创世节点时，我们创建了个默认账户。可以通过如下命令查看账户余额。


> eth.accounts
["0x4b691e86c622127ed8e1d49899ad8c1d19834327"]
> primary=eth.accounts[0]
"0x4b691e86c622127ed8e1d49899ad8c1d19834327"
> balance = web3.fromWei(eth.getBalance(primary), "ether");
20

配置第二台私链服务器
第二台私链服务器，需要把第一台的步骤基本都要重复一遍。两台服务器配置一样才可以通讯。 需要改变的地方是：

第三步创建genesis.json的时候，完全使用第一台服务器的配置，不要用新建的account来创建。
需要将第一台服务器添加到静态节点列表中。
7.添加静态节点列表
在{datadir}下添加文件 static-nodes.json,内容如下：

[
"enode://dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094@第一个节点的IP地址:30303"
]
执行如下脚本启动节点：

geth --identity "phoenix"  --rpc  --rpccorsdomain "*" --datadir "/root/chain" --port "30303"  --rpcapi "db,eth,net,web3" --networkid 98888 console
启动成功后，查看当前连接的节点：


> admin.peers
[{
    caps: ["eth/62", "eth/63"],
    id: "dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094",
    name: "Geth/v1.5.0-unstable/linux/go1.5.1/phoenix",
    network: {
      localAddress: "10.15.244.204:56808",
      remoteAddress: "10.15.244.203:30303"
    },
    protocols: {
      eth: {
        difficulty: 131072,
        head: "0xaab381212b8108c488c8d21c06042a9081b94bfb87665110520d3c295626e79b",
        version: 63
      }
    }
}]

挖矿
激动人心的时刻到了。 作为一个伪金融圈人士，最大的梦想，古时候叫拥有一个聚宝盆，现在叫拥有一个印钞权，在数字货币时代，叫拥有一个挖矿机。 自己搭建的区块链，想怎么挖就怎么挖吧。

私链启动起来之后，挖矿其实很简单了。 首先必须保证的有一个账号：


> eth.accounts
["0x1b39aa2446de648dd6928a759c542690cc32757b"]
> eth.getBalance(eth.accounts[0]).toNumber();
0

账号里没钱。 那就开始挖吧。挖矿其实很简单，一个命令就开始了。默认的，挖到的钱，都放在当前账号中。如果有多个账号，默认的放到第一个账号中。 在geth环境下，运行：


> miner.start();

或者运行命令行：


geth --mine --minerthreads=4

minerthreads用来指定运行的线程数。默认为当前CPU的核数。 如果有多个账号，可以指定挖矿收入放到第几个账号，注意编号是从0开始的：


miner.setEtherbase(eth.accounts[0])

或者命令行执行：


geth --etherbase 0 --mine  2>> geth.log // 0 is index: first account by creation order OR
geth --etherbase '0x1b39aa2446de648dd6928a759c542690cc32757b' --mine 2>> geth.log

半小时后，查看下账户余额：


> eth.getBalance(eth.accounts[0]).toNumber();
1.5971875e+21

话说， e+21，那是多大的数字啊？？一辈子还没见过这么多钱。 头条的同学们，记得帮忙点赞啊。



本文假定你已经看过上一篇文档码农的区块链：搭建一个私有区块链环境。

运行环境
这个实例是在三台机器上运行，dev011, dev012,dev013。 在这三台机器上启动以太坊。注意将其他两台机器加入到静态节点名单static-nodes.json中：

[
 "enode://{dev011的node id}@{dev011的IP地址}:{dev011的端口号，30303}",
 "enode://{dev012的node id}@{dev012的IP地址}:{dev012的端口号，30303}",
 "enode://{dev013的node id}@{dev013的IP地址}:{dev013的端口号，30303}",
]

启动服务：


geth --identity "phoenix" --verbosity 1  --maxpeers 20  --rpc  --rpccorsdomain "*" --datadir "/root/chain" --port "30303"  --rpcapi "db,eth,net,web3" --networkid "98888" console

在每个机器上运行查看是否能看到其他两台服务器：


> admin.peers
[{
    caps: ["eth/62", "eth/63"],
    id: "d9230e177da4d43c59b72267fc65bdedde7fe91c4c992de8af84cec3a701a90f51c8aa49f43b2afc6a08dc3e73c13061cb685f7a69a52c807d781d0605aef247",
    name: "Geth/v1.5.0-unstable/linux/go1.5.1/phoenix",
    network: {
      localAddress: "10.15.244.204:36507",
      remoteAddress: "10.15.244.205:30303"
    },
    protocols: {
      eth: {
        difficulty: 693825985,
        head: "0xe9c3959532c3ac7d9a754e3214ebf4dd5c056de8637e2d0e50c07fcc9b2d6971",
        version: 63
      }
    }
}, {
    caps: ["eth/62", "eth/63"],
    id: "dfd047d64a3d8c9d9c2834bc8c3bbf41a79e6797956fa99469b872d97a7978e4e7a6d9605ec6e77164515f6f09d979999ca3ef91eebcd2a6c91ebdfe167de094",
    name: "Geth/v1.5.0-unstable/linux/go1.5.1/phoenix",
    network: {
      localAddress: "10.15.244.204:57515",
      remoteAddress: "10.15.244.203:30303"
    },
    protocols: {
      eth: {
        difficulty: 188851762,
        head: "0x27d7e2703c49e4f33fc37dd3ca8e79286005a09b4ba55cda1af1c9f8c9715c98",
        version: 63
      }
    }
}]

启动挖矿
在dev013机器上开始挖矿，准备记账：

> miner.start()
true
执行转账
我们使用dev011和dev012上的账户执行转账操作。输出账户在dev012上，先看看这个账户的余额，解锁账户，执行转账操作。


> eth.getBalance('0x1b39aa2446de648dd6928a759c542690cc32757b')
4.7405156e+21
> personal.unlockAccount('0x1b39aa2446de648dd6928a759c542690cc32757b')
Unlock account 0x1b39aa2446de648dd6928a759c542690cc32757b
Passphrase: 
true
> eth.sendTransaction({from:'0x1b39aa2446de648dd6928a759c542690cc32757b', to:'0x4b691e86c622127ed8e1d49899ad8c1d19834327',value:web3.toWei(1,"ether")})

这个交易并不会立即生效，可通过这个命令来看看还未被记账的交易：

> eth.getBlock("pending", true).transactions
[{
    blockHash: "0x6d4772cc2025f52cf1727f1404ba27362d015b31f8de5bd2140d3c7a0d9890a0",
    blockNumber: 3151,
    from: "0x1b39aa2446de648dd6928a759c542690cc32757b",
    gas: 90000,
    gasPrice: 20000000000,
    hash: "0xd5960b0742e29c63a6c678cb8480c85d28d70a25c53a68d9047db0e2e7f59180",
    input: "0x",
    nonce: 25,
    r: "0x7a55c4e3d3bd55c8ba057d66d60c8d4e323c6d8443fee8cec57066bc2b02cb95",
    s: "0x4cf036d913b48586d8fbc6e3219ab5a722582e2b7c4cef999ff1d3f345f16ae9",
    to: "0x4b691e86c622127ed8e1d49899ad8c1d19834327",
    transactionIndex: 0,
    v: "0x1b",
    value: 1000000000000000000
}]

这表明矿工还没有将这个交易记录到账上。 几分钟后，在运行这个命令：

> eth.getBlock("pending", true).transactions
[]

这说明交易已经生效。我们看一下账户余额：

> eth.getBalance('0x1b39aa2446de648dd6928a759c542690cc32757b')
4.73951518e+21

可以看到，钱已经被转走了。

币值计算
总共花了多少钱？ 这里涉及到以太币的单位换算。 以太坊有两个币单位：

ether， 即常说的以太币。
wei，这是最小单位的币值。
1个ether = 1e18, 即10的18次方个 wei。

他们之间的转换通过web3.fromWei({wei币值}, “ether”) 和 web3.toWei({ether币值},”ether”)来进行。


> eth.getBalance('0x1b39aa2446de648dd6928a759c542690cc32757b').toString(10)
"4739515180000000000000"
> web3.fromWei(eth.getBalance('0x1b39aa2446de648dd6928a759c542690cc32757b'), "ether")
4739.51518

上述账号， 交易前和交易后，转换成ether，支出是：


4740.5156 - 4739.51518 = 1.00042

其中 1 ether 是转走的以太币， 0.00042 是gas费用，支付给矿工的。

这是最简单的转账操作，后续给大家介绍以太坊的核心合约是怎么操作的。

头条的同学们，记得帮忙点赞啊。

感谢您对本文的关注，如需要及时收到凤凰牌老熊的最新作品，或者有相关问题探讨，请扫码关注“凤凰牌老熊”的微信公众号，在公众号里留言或者回复，可以尽快处理，谢谢。


开发合约，需要一个编译器。 就像开发Java程序一样，需要javac将文本代码变成可执行的代码。 最常用的是solidity编译器。

首先是准备开发和运行环境。这里我还是使用两台机器来跑，一台机器挖矿，一台机器运行合约。 整个环境都是在私链中运行的。

如何安装环境，挖矿，参考前两篇文章：

码农的区块链：搭建一个私有区块链环境
在以太坊上私链上实现一个简单的交易
安装solidity
启动geth，首先检查是否安装了solidity。

> eth.getCompilers();
["Solidity"]
如果返回值是空的，先用where solc看看是否已经安装了，如果没有，则安装下solidity编辑器：

sudo apt-get install solc
安装完成之后，再运行上述命令，应该能看到结果了。

安装一个合约
首先，写一个简单的合约代码，将输入的值 乘以 7 ，输出来，代码如下：

> source = "contract test { function multiply(uint a) returns(uint d) { return a * 7; } }"
"contract test { function multiply(uint a) returns(uint d) { return a * 7; } }"
使用solidity编译下这个代码，生成合约：


> contract = eth.compile.solidity(source).test
{
  code: "0x606060405260308060106000396000f3606060405260e060020a6000350463c6888fa18114601c575b6002565b346002576007600435026060908152602090f3",
  info: {
    abiDefinition: [{
        constant: false,
        inputs: [...],
        name: "multiply",
        outputs: [...],
        payable: false,
        type: "function"
    }],
    compilerOptions: "--combined-json bin,abi,userdoc,devdoc --add-std --optimize",
    compilerVersion: "0.4.0",
    developerDoc: {
      methods: {}
    },
    language: "Solidity",
    languageVersion: "0.4.0",
    source: "contract test { function multiply(uint a) returns(uint d) { return a * 7; } }",
    userDoc: {
      methods: {}
    }
  }
}

编译结果各个标签说明如下：

Code ： 编译的以太坊虚拟机字节代码
Info ： 从编译器输出的额外元数据
Source ： 源代码
Language ： 合约语言 (Solidity，Serpent，LLL)
LanguageVersion ： 合约语言版本
compilerVersion ： 用于编译这个合约的solidity编译器版本。
abiDefinition： 应用的二进制界面定义
userDoc ： 用户的NatSpec Doc。
developerDoc ： 开发者的NatSpec Doc。
创建合约并将合约部署到区块链上：


//打开账户
primaryAccount = eth.accounts[0];
personal.unlockAccount(primaryAccount, "密码");

//创建合约对象

var MyContract = eth.contract(contract.info.abiDefinition)

// 将合约代码保存到文件上，这一步可以略过。 
//contenthash = admin.saveInfo(contract.info, "~/info.json")

// 保存合约到区块链上。输出一行日志， 将部署的地址打印出来。 
var mycon = MyContract.new({from: primaryAccount, data: contract.code}, function(error, contract){
	if(!error && contract.address) {
	 console.log("Contract mined! address: " + contract.address + " transactionHash: " + contract.transactionHash);
		 }
 });

这里要特别注意， MyContract.new 会将合约部署到区块链上，这个操作依赖于挖矿行为，要一直等到矿工将合约部署到区块上，才可以进入下一步。 看到这一行数据，才说明部署成功：

> Contract mined! address: 0xff6b454f8454eafc969267cb873e37621d5bedc4 transactionHash: 0xffec10839c9939b2fdd23f2bb9156cf513e239b0862e53fa067f8c116e75cb21
特别注意这里的address，这是合约的部署地址，下面我们要用到这个地址：


//合约的部署地址；

var address = "0xff6b454f8454eafc969267cb873e37621d5bedc4";

var Multiply = web3.eth.contract([{constant:false,inputs:[{name:'a',type:'uint256'}],name:'multiply',outputs:[{name:'d',type:'uint256'}],type:'function'}]);

var myMultiply = Multiply.at(address);

myMultiply.multiply.call(9);

最终能看到输出结果是 63。 这说明调用成功了。而这一块代码，可以放到任何一台以太坊客户端来执行。 这样以太坊最核心的几个概念，在这三篇文档中都介绍完毕。

后续我们研究如何使用以太坊来做一些激动人心的事情。 头条的同学们，记得帮忙点赞啊。