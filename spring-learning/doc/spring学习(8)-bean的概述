一、BeanFactory介绍

1.1、Bean：

在Spring技术中是基于组件的
最基本了是最常用的单元
其实实例保存在Spring的容器当中
Bean通常被定义在配置文件当中，Bean实例化由Spring的Ioc容器进行管理，Bean的实例可以通过Beanfactory进行访问，实际上大部分J2EE应用，Bean是通过ApplicationContext来访问的，ApplicationContext是BeanFactory的子接口，功能要比BeanFactory强大许多

1.2、BeanFactory作用

配置、创建以及管理Bean对象
维持Bean对象之间的依赖关系
负责Bean对象的生命周期
BeanFactory常用方法：

 containsBean(String beanname)
Object getBean(String beanName)
通常使用XmlBeanFactory类来实现

1.3、ApplicationContext

读取Bean定义文件
维护Bean之间的依赖关系
国际化的支持
资源文件的读取getRource（）方法可以轻松读取Rource对象
事件传播
多配置文件加载
 

二、Bean定义

2.1、基本组成

配置文件

<beans/>是Sring配置文件的根节点
一个<beans/>节点里面可以有多个<bean>节点
定义<bean>节点时，通常要指定两个属性

id:用来指明bean的标识符，这个标识符具有唯一性，Spring对bean的管理以及bean之间这种依赖关系都需要这个属性

class: 指明该bean的具体实现类，这里不能是接口（可以是接口实现类）全路径包名.类名

Bean在Spring容器中两种行为（通过scope来设置默认不写为singelton）

singleton：单实例模式（默认，构造方法为private），整个Spring的容器中只有一个共享实例存在(singleton)

non-singelton:每次请求该bean,Spring容器都会新建立一个bean实例，然后返回给程序（request,session,prototype）

2.2、创建Bean

Bean的命名：

按照Java中的命名规范即可,使用清晰的，描述性的，一致的命名规范

Bean的命名机制：

id 当在Spring的窗口当中，查找某个Bean对象时，首先根据id进行查找，将其余作为Bean的默认名称，如果ID属性不存在，则根据Name属性进行查找（将其中的第一个名称作为默认的名称），如果ID和NAME都不存在根据类的名称进行查找

id---------->name--------------->类名

<bean id="id1" class="实现类"></bean>
<bean name="id1" class="实现类"></bean>
<bean  class="实现类"></bean>
Bean的别名:

通过alias属性指定：

<alias name="指定关联的Bean的名称fromname" alias="该关联类的别名的名称toname"/>
2.3、创建Bean步骤

创建XML文件----写入配置信息---生成Bean类----加入Bean到配置文件

三、Bean注入

3.1、基本类型和String

用到Value元素
XML解析器以String类型解析出数据
如果属性不是String类型，属性值会通过PropertyEditors转换为其他类型

3.2、注入Bean

 -ref元素进行标识 

Ref元素通常有两个属性：

bean:指定不在同一个XML文件中的bean的id

<bean id="test" class="com.pb.test">
<property name="user">
<ref bean="其他的bean的id"/>
</property>
</bean>
local：指定在同一个XML文件中的bean的id

<bean id="test" class="com.pb.test">
<property name="user">
<ref bean="相同的XML文件中的bean的id"/>
</property>
</bean>
value和ref的区别:

使用ref元素，可以让Spring在部署时验证依赖的Bean是否真实存在

使用value元素,进行指定仅在创建Bean实例时做验证,会导致错误的延时出现，而且还会带来额外的类型转制开销

3.3、集合注入

List:

复制代码
<bean id="test" class="com.pb.test">
        <property name="lists">
        <list>
        <value>1</value>
        <value>2</value>
        <value>3</value>
        </list>
        </property>
    </bean>
复制代码
 

Map:

复制代码
<bean id="test" class="com.pb.test">
        <property name="map">
            <map>
                <entry key="key1">
                    <value>value1</value>
                </entry>
                <entry key="key2">
                    <value>key2</value>
                </entry>
            </map>
        </property>
    </bean>
复制代码
 

props:

复制代码
<bean id="test" class="com.pb.test">
<property name="props">
<props>
<prop key="key1">value1</prop>
<prop key="key2">value2</prop>
</props>
</property>
</bean>
复制代码
set:

复制代码
 < property  name ="interest" >    
             < set >    
                 < value > 唱歌 </ value >    
                 < value > 跳舞 </ value >    
                 < value > 书法 </ value >    
             </ set >    
    </ property >    
复制代码
 

3.4、自动绑定

通过autowire属性来设置

no：默认的。默认为不绑定

byName：根据属性名称自动进行绑定

byType:根据属性类型自动进行绑定

四、Bean的作用域

singleton:(单实例模式)spring容器只会存在一个共享的bean实例，并且所有针对该bean的请求只会返回同一个bean实例。
propertype(no-singleton):对每一次针对该bean的请求都会生成一个新的bean实例。 相当于java中的new 操作。定义为propertype的bean其生命周期很长，不易回收，通常要额外的处理。
request:针对每一次的http请求都会产生一个新的bean实例，Bean仅在当前的http request范围内有效
session:针对每一次的http请求都会产生一个新的bean实例，Bean仅在当前的http session范围内有效
五、Bean管理生命周期

5.1、Bean的生命周期





5.2、生命周期管理

两个时机

Spring可以管理实例化bean之间以及销毁之前的行为

注入依赖关系之后：

使用init-method属性：通过指定init-method属性，确定某个方法应该在Bean依赖关系结束之后执行。这种方式无需要将代码与Spring的接口耦合在一起代码污染极小。通常在bean当中进行方法定义如init()方法，然后在配置文件Bean元素中加入init-method属性来实现这个过程。
实现InnitializingBean接口：这种方式无须指明init-method属性，当窗口依赖注入以后，会自动调用afterPropertiesSet方法，它和init-method执行效果一样，但这种方式属于侵入性的代码设计不推荐使用
销毁Bean之前：

 destroy-method:用于在执行Bean销毁之前所执行的方法，这种方式和init-method一样无压需要代码与Spring的接口耦合在一起代码污染极小。在bean中加入destory-method属性和实现这个过程
实现DisposeableBean接口：无需要指明destory-method属性，当容器依赖注入以后，会自动调用destroty方法,属于侵入性代码设计不推荐使用
六、Bean的继承

Bean的继承：

什么是Bean继承呢？继承是指子bean可以从父bean继承配置信息，也可以覆盖特定的配置信息，或者在父bean的基础之上加入新的配置信息，其实质类似于java中的子类与父类的继承关系，利用继承可以节省很多配置工作，在实际的项目应用中，共有的配置会配置成模板，供子bean继承，如果2个bean之间配置信息大致相同，可以采用bean的继承来减少配置工作。

Bean的模板：

在Spring中既然要将公用的配置，配置称模板，这个模板不需要被实例化，而仅仅作为子bean的模板来使用，但在ApplicationContext或者BeanFactory默认会初始化所有的bean.

使用abstract属性，该属性可以阻止模板被实例化

abstract="true"时，表示该bean是抽象的bean，不能被初始化。








从前面我们知道spring其实就是一个大型的工厂，而Spring容器中的Bean就是该工厂的产品.对于Spring容器能够生产那些产品，则取决于配置文件中配置。
        对于我们而言，我们使用Spring框架所做的就是两件事：开发Bean、配置Bean。对于Spring矿建来说，它要做的就是根据配置文件来创建Bean实例，并调用Bean实例的方法完成“依赖注入”。
 
        一、Bean的定义
        <beans…/>元素是Spring配置文件的根元素，<bean…/>元素师<beans../>元素的子元素，<beans…/>元素可以包含多个<bean…/>子元素，每个<bean…/>元素可以定义一个Bean实例，每一个Bean对应Spring容器里的一个Java实例定义Bean时通常需要指定两个属性。
         Id：确定该Bean的唯一标识符，容器对Bean管理、访问、以及该Bean的依赖关系，都通过该属性完成。Bean的id属性在Spring容器中是唯一的。    
        Class：指定该Bean的具体实现类。注意这里不能使接口。通常情况下，Spring会直接使用new关键字创建该Bean的实例，因此，这里必须提供Bean实现类的类名。
        下面是定义一个Bean的简单配置
[html] view plain copy
<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns="http://www.springframework.org/schema/beans"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
    <!-- 定义第一个Bean实例：bean1 -->  
    <bean id="bean1" class="com.Bean1" />  
      
    <!-- 定义第二个Bean实例：bean2 -->  
    <bean id="bean2" class="com.Bean2" />  
      
</bean>  
       
        Spring容器集中管理Bean的实例化，Bean实例可以通过BeanFactory的getBean(Stringbeanid)方法得到。BeanFactory是一个工厂，程序只需要获取BeanFactory引用，即可获得Spring容器管理全部实例的引用。程序不需要与具体实例的实现过程耦合。大部分Java EE应用里，应用在启动时，会自动创建Spring容器，组件之间直接以依赖注入的方式耦合，甚至无须主动访问Spring容器本身。
        当我们在配置文件中通过<bean id=”xxxx” class=”xx.XxClass”/>方法配置一个Bean时，这样就需要该Bean实现类中必须有一个无参构造器。故Spring底层相当于调用了如下代码：
[html] view plain copy
Xxx = new xx.XxClass()  

        如果在配置文件中通过构造注入来创建Bean：
[html] view plain copy
<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns="http://www.springframework.org/schema/beans"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
    <bean id="bean1" class="com.Bean1">  
        <constructor-arg value="chenssy"/>  
        <constructor-arg value="35-354"/>  
    </bean>  
      
</beans>  

        则Spring相当于调用如下代码：
[html] view plain copy
Bean bean = new com.Test("chenssy","35-354");  
        除了可以为<bean…/>元素指定一个id属性外，还可以为<bean…/>元素指定name属性，用于为Bean实例指定别名。如果需要为Bean实例指定多个别名，可以在name属性中使用逗号、冒号或者空格来分隔多个别名，后面通过任一别名即可访问该Bean实例。但是在一些特殊的情况下，程序无法在定义Bean时就指定所有的别名，而是在其他地方为一个已经存在的Bean实例指定别名，则可以使用<alias…/>元素来完成，该元素有如下两个属性：
        name：该属性指定一个Bean实例的标识名，表示将会为该Bean指定别名。
        alias：指定一个别名.
        如：
[html] view plain copy
<alias name=”bean1” alias=”name1”/>  
<alias name=”bean2” alias=”name2”/>  
        在默认情况下，当Spring创建ApplicationContext容器时，Spring会自动预初始化容器中所有的singleton实例，如果我们想让Spring容器预初始化某个singleton Bean，则可以为该<bean…/>元素增加lazy-init属性，该属性用于指定该Bean实例的预初始化，如果设置为true，则Spring不会预初始化该Bean实例。
[html] view plain copy
<bean id=”person” class=”com.Person” lazy-init=”true”/>  
 
        一、       容器中Bean的作用域        当通过Spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。
        Spring支持5种作用域：
           Singleton：单例模式。在整个SpringIoC容器中，使用singleton定义的Bean将只有一个实例。
           Prototype：原型模式。每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例。
           request：对于每次HTTP请求，使用request定义的Bean都将产生一个新的实例，即每次HTTP请求都会产生不同的Bean实例。当然只有在WEB应用中使用Spring时，该作用域才真正有效。
        session：对于每次HTTPSession，使用session定义的Bean都将产生一个新的实例时，即每次HTTP Session都将产生不同的Bean实例。同HTTP一样，只有在WEB应用才会有效。
        global session：每个全局的HTTPSession对应一个Bean实例。仅在portlet Context的时候才有效。
       
        比较常用的singleton和prototype。如果一个Bean实例被设置为singleton，那么每次请求该Bean时都会获得相同的实例。容器负责跟踪Bean实例的状态，负责维护Bean实例的生命周期行为。如果一个Bean实例被设置为prototype，那么每次请求该di的Bean，Spring都会创建一个新的Bean实例返回给程序，在这种情况下，Spring容器仅仅使用new关键字创建Bean实例，一旦创建成功，容器将不会再跟踪实例，也不会维护Bean实例的状态。
        如果我们不指定Bean的作用域，则Spring会默认使用singleton作用域。
        Java在创建Java实例时，需要进行内存申请。销毁实例时，需要完成垃圾回收。这些工作都会导致系统开销的增加。因此，prototype作用域Bean的创建、销毁代价会比较大。而singleton作用域的Bean实例一旦创建成功，可以重复使用。因此，除非必要，否则尽量避免将Bean的作用域设置为prototype。
        设置Bean的作用域是通过scope属性来指定。可以接受Singleton、prototype、request、session、global session 5个值。
[html] view plain copy
<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns="http://www.springframework.org/schema/beans"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
    <!-- 配置一个singleton Bean实例：默认 -->  
    <bean id="bean1" class="com.Bean1" />  
    <!-- 配置一个prototype Bean实例 -->  
    <bean id="bean2" class="com.Bean2" scope="prototype"/>  
      
</beans>  
        上面的配置，对于bean1没有指定scope属性，则默认使用singleton，而bean2则指定一个prototype。
        测试代码：
[java] view plain copy
public class SpringTest {  
  
    public static void main(String[] args) {  
        ApplicationContext ctx = new ClassPathXmlApplicationContext("bean.xml");  
        //判断两次请求singleton作用域的Bean实例是否相等  
        System.out.println(ctx.getBean("bean1")==ctx.getBean("bean1"));  
        //判断两次请求prototype作用域的Bean实例是否相等  
        System.out.println(ctx.getBean("bean2")==ctx.getBean("bean2"));  
    }  
  
}  
        程序运行结果如下
     true
     false
        从上面的运行结果可以看出：对于singleton作用域的Bean，每次请求该id的Bean时都将返回同一个Bean实例，但是prototype返回的都是一个新的Bean实例，每次请求返回的Bean实例都将不同。
        对于request作用域而言，先看如下Bean实例定义：
[html] view plain copy
<bean id=”login” class=”com.app.LoginAction” scope=”request”/>  
        对于每次HTTP请求，Spring容器都会根据login Bean定义创建一个全新的LoginAction Bean实例，且该loginAction Bean实例仅在当前HTTP Request内有效。
        对于session作用域相同。只不过有效范围不同而已。
        request和session作用域只在web应用中才会有效，并且必须在Web应用中增加额外配置才会生效。为了能够让request和session两个作用域生效，必须将HTTP请求对象绑定到位该请求提供的服务线程上，这使得具有request和session作用的Bean实例能够在后面的调用链中被访问到。
        因此我们可以采用两种配置方式：采用Listener配置或者采用Filter配置，在web.xml中。
        Listener配置：
[html] view plain copy
<listener>  
    <listener-class>  
        org.springframework.web.context.request.RequestContextListener  
    </listener-class>  
</listener>  
        Filter配置
[html] view plain copy
<filter>  
    <filter-name>requestContextFilter</filter-name>  
    <filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>  
</filter>  
<filter-mapping>  
    <filter-name>requestContextFilter</filter-name>  
    <url-pattern>/*</url-pattern>  
</filter-mapping>  
 
        一旦在web.xml中增加上面两种配置中的一种，程序就可以在Spring配置文件中使用request或者session作用域了。如下：
[html] view plain copy
<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns="http://www.springframework.org/schema/beans"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
    <!-- 指定使用request作用域 -->  
    <bean id="p" class="com.app.Person" scope="request"/>  
      
</beans>  
        上面的配置文件配置了一个实现类Person的Bean，指定它的作用域为request。这样Spring容器会为每次的HttP请求生成一个Person的实例，当该请求响应结束时，该实例也会被注销。