本文简单的介绍数据结构中表的概念，以及表在Java中的实现方式。
我们将处理形如A0，A1，A2，...，AN-1的表。我们说这个表的大小是N。我们将大小为0的特殊的表称之为空表。
对于除空表之外的任何表，我们说Ai后继Ai-1（或Ai-1之后，i<N）并称Ai-1前驱Ai（i>0）。表中的第一个元素是A0，最后一个元素是AN-1。
ArrayList类的实现
LinkedList类的实现


1. 表的简单数组实现
对表的所有这些操作都可以通过使用数组来实现。虽然数组是固定容量创建的，但在需要的时候可以用双倍的容量创建一个不同的数组。
下面简单解释一个数组如何在必要的时候进行扩充。

int[] arr = new int[10];
int[] newArr = new int[arr.length * ２];

for(int i = 0; i < arr.length; i++){
    newArr[i] = arr[i];
}

arr = newArr;
 来自CODE的代码片 arrExpand.txt
数组的实现可以使打印数组元素以线性时间被执行，而查找元素位置则花费常数时间。不过插入和删除的花费潜藏着昂贵的开销，这要看插入和删除发生在什么地方。最坏的情况下，在表的前端插入需要将数组中的元素后移一个位置，而删除一个元素需要将数组中的元素前移一个位置。因此，这两种操作最坏的情况是O(N)，平均来看，这两种操作都需要移动表的一般的元素，因此仍然需要线性的时间。另一方面，如果所有的操作都发生在表的高端，那就没有元素需要移动，而添加和删除元素只花费O(1)时间。


2. 简单链表
为了避免插入和删除的线性开销，我们需要保证表可以不连续存储，否则表的每个部分都可能需要整体移动。下图指出了链表的一般想法。



链表由系列节点组成，这些节点不必在内存中相连。每一个节点均含有表元素和到包含该元素后继元的及诶单的链。我们称之为next链。最后一个单元的next链引用为null。

remove方法可以通过修改一个next引用来实现。下图指出了删除表中第三个元素的结果，虚线表示原来的next引用。

insert方法可以调整next引用来实现。下图指出在表中添加第三个元素的结果，虚线表示原来的next引用。

双链表中的每一个节点持有一个指向它在表中前驱节点的链，如下图所示。
