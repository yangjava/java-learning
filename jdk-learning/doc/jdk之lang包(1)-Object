## Object

	Object是所有Java类的父类，因为在创建Java类的的时候，如果新类没有任何继承类，
	那么它就继承Object类。这个类就位于Lang包中。
	
	Object类是Java中其他所有类的祖先，没有Object类Java面向对象无从谈起。
	作为其他所有类的基类，Object具有哪些属性和行为，是Java语言设计背后的思维体现。
	Object类位于java.lang包中，java.lang包包含着Java最基础和核心的类，在编译时会自动导入。
	Object类没有定义属性，一共有13个方法，具体的类定义结构:

首先我们发现Object中几乎所有的方法声明都有一个native关键字，
这个关键字有什么用呢？
它的作用就是告诉JVM，我的实现方法不在这里，我需要操作系统层面的帮助，我被调用的时候操作系统你得给我对应的实现。
说白了，它的实现在.dll中或者在.so中（不同平台）。

//包 lang包
package java.lang;

public class Object {

      类构造器public Object();
      大部分情况下，Java中通过形如 new A(args..)形式创建一个属于该类型的对象。
      其中A即是类名，A(args..)即此类定义中相对应的构造函数。
      通过此种形式创建的对象都是通过类中的构造函数完成。
      为体现此特性，Java中规定：在类定义过程中，对于未定义构造函数的类，默认会有一个无参数的构造函数，
      作为所有类的基类，Object类自然要反映出此特性，在源码中，未给出Object类构造函数定义，
      但实际上，此构造函数是存在的。当然，并不是所有的类都是通过此种方式去构建，也自然的，并不是所有的类构造函数都是public。

   public Object(){
   
   }

   registerNatives函数前面有native关键字修饰，
   Java中，用native关键字修饰的函数表明该方法的实现并不是在Java中去完成，而是由C/C++去完成，
        并被编译成了.dll，由Java去调用。方法的具体实现体在dll文件中，
        对于不同平台，其具体实现应该有所不同。用native修饰，即表示操作系统，需要提供此方法，Java本身需要使用。
        具体到registerNatives()方法本身，其主要作用是将C/C++中的方法映射到Java中的native方法，
         实现方法命名的解耦。下面的static方法块的作用就是这个类在被类加载器加载时执行一次，
         且仅执行一次。
         
    private static native void registerNatives();
    static {
        registerNatives();
    }
    
       在学习反射的时候是不是经常用到这个函数？getClass方法的主要作用是在运行时获取类类型，
        即返回一个java.lang.Class的实例，获取这个实例之后就能使用这个类的方法了。
        
        首先解释下"类对象"的概念：在Java中，类是是对具有一组相同特征或行为的实例的抽象并进行描述，
        对象则是此类所描述的特征或行为的具体实例。
        作为概念层次的类，其本身也具有某些共同的特性，如都具有类名称、由类加载器去加载，都具有包，具有父类，属性和方法等。
        于是，Java中有专门定义了一个类，Class，去描述其他类所具有的这些特性，因此，从此角度去看，类本身也都是属于Class类的对象。
         为与经常意义上的对象相区分，在此称之为"类对象"。    
    
    public final native Class<?> getClass();
    
          获取的是类实例在JVM中的哈希码，唯一的。
    /*  
	hashCode 的常规协定是：  
	1.在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals 比较时所用的信息没有被修改。从某一应用程序的一次执行到同一应用程序的另一次执行，该整数无需保持一致。   
	2.如果根据 equals(Object) 方法，两个对象是相等的，那么对这两个对象中的每个对象调用 hashCode 方法都必须生成相同的整数结果。   
	3.如果根据 equals(java.lang.Object) 方法，两个对象不相等，那么对这两个对象中的任一对象上调用 hashCode 方法不 要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。  
	*/  
	
	即严格的数学逻辑表示为： 两个对象相等 <=>  equals()相等  => hashCode()相等。
          因此，重写equlas()方法必须重写hashCode()方法，以保证此逻辑严格成立，同时可以推理出：
    hasCode()不相等 => equals（）不相等 <=> 两个对象不相等。

	可能有人在此产生疑问：既然比较两个对象是否相等的唯一条件（也是冲要条件）是equals，
	那么为什么还要弄出一个hashCode()，并且进行如此约定，弄得这么麻烦？
          其实，这主要体现在hashCode()方法的作用上，其主要用于增强哈希表的性能。
	以集合类中，以Set为例，当新加一个对象时，需要判断现有集合中是否已经存在与此对象相等的对象，
	如果没有hashCode()方法，需要将Set进行一次遍历，并逐一用equals()方法判断两个对象是否相等，此种算法时间复杂度为o(n)。
	通过借助于hasCode方法，先计算出即将新加入对象的哈希码，然后根据哈希算法计算出此对象的位置，直接判断此位置上是否已有对象即可。
	（注：Set的底层用的是Map的原理实现）
	在此需要纠正一个理解上的误区：对象的hashCode()返回的不是对象所在的物理内存地址。
	甚至也不一定是对象的逻辑地址，hashCode()相同的两个对象，不一定相等，换言之，不相等的两个对象，hashCode()返回的哈希码可能相同。
	
    public native int hashCode();
    
          原生的equals是比较两个对应的内存地址是一样。
          如果要比较两个实例的内容则需要重写这个方法，这也是开发过程中经常遇到的
    ==与equals在Java中经常被使用，大家也都知道==与equals的区别：
    ==表示的是变量值完成相同（对于基础类型，地址中存储的是值，引用类型则存储指向实际对象的地址）；
    equals表示的是对象的内容完全相同，此处的内容多指对象的特征/属性。      
         如上，在object类中，此标尺即为==。当然，这个标尺不是固定的，其他类中可以按照实际的需要对此标尺含义进行重定义。
          如String类中则是依据字符串内容是否相等来重定义了此标尺含义。
          如此可以增加类的功能型和实际编码的灵活性。
           当然了，如果自定义的类没有重写equals()方法来重新定义此标尺，那么默认的将是其父类的equals()，直到object基类。
    public boolean equals(Object obj) {
        return (this == obj);
    }
    
    clone()方法又是一个被声明为native的方法，因此，我们知道了clone()方法并不是Java的原生方法，具体的实现是有C/C++完成的。
    clone英文翻译为"克隆"，其目的是创建并返回此对象的一个副本。
         形象点理解，这有一辆科鲁兹，你看着不错，想要个一模一样的。你调用此方法即可像变魔术一样变出一辆一模一样的科鲁兹出来。
          配置一样，长相一样。但从此刻起，原来的那辆科鲁兹如果进行了新的装饰，与你克隆出来的这辆科鲁兹没有任何关系了。
          你克隆出来的对象变不变完全在于你对克隆出来的科鲁兹有没有进行过什么操作了。
    Java术语表述为：clone函数返回的是一个引用，指向的是新的clone出来的对象，此对象与原对象分别占用不同的堆空间。
    /*本地CLONE方法，用于对象的复制。*/
    
    protected native Object clone() throws CloneNotSupportedException;
    
    toString()方法相信大家都经常用到，即使没有显式调用，
         但当我们使用System.out.println(obj)时，其内部也是通过toString()来实现的。
    getClass()返回对象的类对象，getClassName()以String形式返回类对象的名称（含包名）。
    Integer.toHexString(hashCode())则是以对象的哈希码为实参，以16进制无符号整数形式返回此哈希码的字符串表示形式。  
    
    public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }
    
      一说到wait(...) / notify() | notifyAll()几个方法，首先想到的是线程。
      确实，这几个方法主要用于java多线程之间的协作。先具体看下这几个方法的主要含义：
   wait()：调用此方法所在的当前线程等待，直到在其他线程上调用此方法的主调（某一对象）的notify()/notifyAll()方法。
   wait(long timeout)/wait(long timeout, int nanos)：调用此方法所在的当前线程等待，
      直到在其他线程上调用此方法的主调（某一对象）的notisfy()/notisfyAll()方法，或超过指定的超时时间量。
   notify()/notifyAll()：唤醒在此对象监视器上等待的单个线程/所有线程。
   wait(...) / notify() | notifyAll()一般情况下都是配套使用。
   
    notify  notifyAll这两个方法都是关于并发这块的。
    notify的主要作用就是通知一个其他想要获取这个对象控制权的线程，
    notify则是通知全部其他想要获取这个对象控制权的线程，比如A/B/C三个线程，
    A/B/C都在等待获取Q对象的控制权，Q被某个线程执行，当这个线程执行完之后，会释放这个控制权，
         假设这时调用了Q对象的notify方法，则ABC当中有一个会被唤醒获得D对象的控制权；
         如果调用的是Q对象的notifyAll方法，则ABC都会被唤醒，这个时候就会产生竞争，哪个线程会获得控制权就得看实际的竞争条件了。
    PS，一般情况下，推荐使用notifyAll。
    
    public final native void notify();

    public final native void notifyAll();
    
    /*********************************/
    既然是作用于多线程中，为什么却是Object这个基类所具有的方法？原因在于理论上任何对象都可以视为线程同步中的监听器，
    且wait(...)/notify()|notifyAll()方法只能在同步代码块中才能使用。
    从上述例子的输出结果中可以得出如下结论：
  1、wait(...)方法调用后当前线程将立即阻塞，且适当其所持有的同步代码块中的锁，直到被唤醒或超时或打断后且重新获取到锁后才能继续执行；
  2、notify()/notifyAll()方法调用后，其所在线程不会立即释放所持有的锁，直到其所在同步代码块中的代码执行完毕，此时释放锁，因此，如果其同步代码块后还有代码，其执行则依赖于JVM的线程调度。
    在Java源码中，可以看到wait()具体定义如下：
  public final void wait() throws InterruptedException {
     wait(0);
  }
   且wait(long timeout, int nanos)方法定义内部实质上也是通过调用wait(long timeout)完成。
   而wait(long timeout)是一个native方法。因此，wait(...)方法本质上都是native方式实现。
  notify()/notifyAll()方法也都是native方法。
  Java中线程具有较多的知识点，是一块比较大且重要的知识点。
    /*********************************/
    

    public final native void wait(long timeout) throws InterruptedException;

    public final void wait(long timeout, int nanos) throws InterruptedException {
        if (timeout < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
                                "nanosecond timeout value out of range");
        }

        if (nanos > 0) {
            timeout++;
        }

        wait(timeout);
    }
    wait这个方法主要的作用就是放弃目前对象的控制权，让给其他等待这个对象控制权的线程。
         大家看一下wait(long timeout, int nanos)的实现，如果nano大于0则timeout加一毫秒。
         关于wait我稍微延伸一下，很多时候面试会被问wait和sleep的区别。
         这个只要理解它们的本质就好：wait是让出对象的控制权，让其他线程可以控制这个对象，
    sleep则是让出cpu，让其他等待cpu的线程执行，完全不一样的的东西。
    
    
    public final void wait() throws InterruptedException {
        wait(0);
    }
    
    finalize是Java GC这块的方法，对象如果确定要被垃圾回收，则这个方法会被调用，
          它标记这个对象是待回收对象，但是它不会马上被回收，需要等待下一次GC才会被回收。
           这就是老司机经常说的：即使你调用finalize方法这个对象也不会马上回收。
           
    protected void finalize() throws Throwable { }
}




1.volatile：为了获得最佳速度，Java允许线程保存共享成员变量的私有拷贝，
而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比，
volatile修饰的成员变量在每次被线程访问时，都强迫从共享内存中重读该成员变量的值。
而且，当成员变量发生变化时，强迫线程将变化值回写到共享内存。
这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值,volatile关键字就是提示VM：
对于这个成员变量不能保存它的私有拷贝，而应直接与共享成员变量交互。
使用建议：在两个或者更多的线程访问的成员变量上使用volatile。
当要访问的变量已在synchronized代码块中，或者为常量时，不必使用。

2.transient:transient声明一个实例变量，当对象存储时，它的值不需要维持

3.native:native是方法修饰符,native是由另外一种语言实现的本地方法，

一. 什么是Native Method(转载自javaeye某位大侠的文章)
   简单地讲，一个Native Method就是一个java调用非java代码的接口。
   一个Native Method是这样一个java的方法：该方法的实现由非java语言实现，比如C。
   这个特征并非java所特有，很多其它的编程语言都有这一机制，比如在C＋＋中，你可以用extern "C"告知C＋＋编译器去调用一个C的函数。
   "A native method is a Java method whose implementation is provided by non-java code."
   在定义一个native method时，并不提供实现体（有些像定义一个java interface），
   因为其实现体是由非java语言在外面实现的。，下面给了一个示例：    
    public class IHaveNatives
    {
      native public void Native1( int x ) ;
      native static public long Native2() ;
      native synchronized private float Native3( Object o ) ;
      native void Native4( int[] ary ) throws Exception ;
    } 
    这些方法的声明描述了一些非java代码在这些java代码里看起来像什么样子（view）.
    标识符native可以与所有其它的java标识符连用，但是abstract除外。
    这是合理的，因为native暗示这些方法是有实现体的，只不过这些实现体是非java的，但是abstract却显然的指明这些方法无实现体。
    native与其它java标识符连用时，其意义同非Native Method并无差别，
    比如native static表明这个方法可以在不产生类的实例时直接调用，这非常方便，
    比如当你想用一个native method去调用一个C的类库时。
    上面的第三个方法用到了native synchronized，JVM在进入这个方法的实现体之前会执行同步锁机制（就像java的多线程。）
    一个native method方法可以返回任何java类型，包括非基本类型，而且同样可以进行异常控制。
    这些方法的实现体可以制一个异常并且将其抛出，这一点与java的方法非常相似。
    当一个native method接收到一些非基本类型时如Object或一个整型数组时，这个方法可以访问这非些基本型的内部，
    但是这将使这个native方法依赖于你所访问的java类的实现。有一点要牢牢记住：
    我们可以在一个native method的本地实现中访问所有的java特性，但是这要依赖于你所访问的java特性的实现，
    而且这样做远远不如在java语言中使用那些特性方便和容易。
    native method的存在并不会对其他类调用这些本地方法产生任何影响，
    实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法。
    JVM将控制调用本地方法的所有细节。需要注意当我们将一个本地方法声明为final的情况。
    用java实现的方法体在被编译时可能会因为内联而产生效率上的提升。
    但是一个native final方法是否也能获得这样的好处却是值得怀疑的，但是这只是一个代码优化方面的问题，对功能实现没有影响。
    如果一个含有本地方法的类被继承，子类会继承这个本地方法并且可以用java语言重写这个方法（这个似乎看起来有些奇怪）
    ，同样的如果一个本地方法被fianl标识，它被继承后不能被重写。
   本地方法非常有用，因为它有效地扩充了jvm.事实上，我们所写的java代码已经用到了本地方法，
   在sun的java的并发（多线程）的机制实现中，许多与操作系统的接触点都用到了本地方法，
   这使得java程序能够超越java运行时的界限。有了本地方法，java程序可以做任何应用层次的任务。


二.为什么要使用Native Method
   java使用起来非常方便，然而有些层次的任务用java实现起来不容易，或者我们对程序的效率很在意时，问题就来了。
   与java环境外交互：
   有时java应用需要与java外面的环境交互。这是本地方法存在的主要原因，你可以想想java需要与一些底层系统如操作系统或某些硬件交换信息时的情况。本地方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解java应用之外的繁琐的细节。
   与操作系统交互：
   JVM支持着java语言本身和运行时库，它是java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎 样，它毕竟不是一个完整的系统，它经常依赖于一些底层（underneath在下面的）系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用java实现了jre的与底层系统的交互，甚至JVM的一些部分就是用C写的，还有，如果我们要使用一些java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。
    Sun's Java
    Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法是用C实现的，并被植入JVM内部，在Windows 95的平台上，这个本地方法最终将调用Win32 SetPriority() API。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（external dynamic link library）提供，然后被JVM调用。


三.JVM怎样使Native Method跑起来：
    我们知道，当一个类第一次被使用到时，这个类的字节码会被加载到内存，并且只会回载一次。在这个被加载的字节码的入口维持着一个该类所有方法描述符的list，这些方法描述符包含这样一些信息：方法代码存于何处，它有哪些参数，方法的描述符（public之类）等等。
    如果一个方法描述符内有native，这个描述符块将有一个指向该方法的实现的指针。这些实现在一些DLL文件内，但是它们会被操作系统加载到java程序的地址空间。当一个带有本地方法的类被加载时，其相关的DLL并未被加载，因此指向方法实现的指针并不会被设置。当本地方法被调用之前，这些DLL才会被加载，这是通过调用java.system.loadLibrary()实现的。
   
   最后需要提示的是，使用本地方法是有开销的，它丧失了java的很多好处。如果别无选择，我们可以选择使用本地方法。



