1,使用org.springframework.jdbc.datasource.DriverManagerDataSource
说明：DriverManagerDataSource建立连接是只要有连接就新建一个connection,根本没有连接池的作用。 
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
              <property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
              <property name="url"><value>${jdbc.url}</value></property> 
              <property name="username"><value>${jdbc.username}</value></property>
              <property name="password"><value>${jdbc.password}</value></property>

       </bean> 
2.使用org.apache.commons.dbcp.BasicDataSource 
说明:这是一种推荐说明的数据源配置方式，它真正使用了连接池技术 
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
              <property name="driverClassName"> 
                     <value>oracle.jdbc.driver.OracleDriver</value> 
              </property> 
              <property name="url"> 
                     <value>jdbc:oracle:thin:@localhost:1521:orcl</value> 
              </property> 
              <property name="username"> 
                     <value>test</value> 
              </property> 
              <property name="password"> 
                     <value>test</value> 
              </property> 
              <property name="maxActive"> 
                     <value>255</value> 
              </property> 
              <property name="maxIdle"> 
                     <value>2</value> 
              </property> 
              <property name="maxWait"> 
                     <value>120000</value> 
              </property> 
       </bean> 
3.使用org.springframework.jndi.JndiObjectFactoryBean 
说明:JndiObjectFactoryBean 能够通过JNDI获取DataSource 
<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
              <property name="jndiName"><value>java:comp/env/jdbc/roseindiaDB_local</value></property>
       </bean> 
总结：3种方式中的第一种没有使用连接池，故少在项目中用到，第三种方式需要在web server中配置数据源，不方便于部署，本人推荐使用每二种方式进行数据源的配置。
 

配置一个数据源 
    spring在第三方依赖包中包含了两个数据源的实现类包，其一是Apache的DBCP，其二是 C3P0。可以在Spring配置文件中利用这两者中任何一个配置数据源。
 DBCP数据源 
    DBCP类包位于 <spring_home></spring_home>/lib/jakarta-commons/commons-dbcp.jar，DBCP是一个依赖 Jakarta commons-pool对象池机制的数据库连接池，所以在类路径下还必须包括<spring_home></spring_home>/lib/jakarta- commons/commons-pool.jar。下面是使用DBCP配置MySQL数据源的配置片断：
xml 代码
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"       
        destroy-method="close">       
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />      
    <property name="url" value="jdbc:mysql://localhost:3309/sampledb" />      
    <property name="username" value="root" />      
    <property name="password" value="1234" />      
</bean>  
BasicDataSource提供了close()方法关闭数据源，所以必须设定destroy-method=”close”属性， 以便Spring容器关闭时，数据源能够正常关闭。除以上必须的数据源属性外，还有一些常用的属性： 
    defaultAutoCommit：设置从数据源中返回的连接是否采用自动提交机制，默认值为 true； 
    defaultReadOnly：设置数据源是否仅能执行只读操作， 默认值为 false； 
    maxActive：最大连接数据库连接数，设置为0时，表示没有限制； 
    maxIdle：最大等待连接中的数量，设置为0时，表示没有限制； 
    maxWait：最大等待秒数，单位为毫秒， 超过时间会报出错误信息； 
    validationQuery：用于验证连接是否成功的查询SQL语句，SQL语句必须至少要返回一行数据， 如你可以简单地设置为：“select count(*) from user”； 
    removeAbandoned：是否自我中断，默认是 false ； 
    removeAbandonedTimeout：几秒后数据连接会自动断开，在removeAbandoned为true，提供该值； 
    logAbandoned：是否记录中断事件， 默认为 false；
C3P0数据源 
    C3P0是一个开放源代码的JDBC数据源实现项目，它在lib目录中与hibernate一起发布，实现了JDBC3和JDBC2扩展规范说明的 Connection 和Statement 池。C3P0类包位于<spring_home></spring_home>/lib/c3p0/c3p0-0.9.0.4.jar。下面是使用C3P0配置一个 Oracle数据源：
xml 代码
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"       
        destroy-method="close">      
    <property name="driverClass" value=" oracle.jdbc.driver.OracleDriver "/>      
    <property name="jdbcUrl" value=" jdbc:oracle:thin:@localhost:1521:ora9i "/>      
    <property name="user" value="admin"/>      
    <property name="password" value="1234"/>      
</bean>  
ComboPooledDataSource和BasicDataSource一样提供了一个用于关闭数据源的close()方法，这样我们就可以保证Spring容器关闭时数据源能够成功释放。 
    C3P0拥有比DBCP更丰富的配置属性，通过这些属性，可以对数据源进行各种有效的控制： 
    acquireIncrement：当连接池中的连接用完时，C3P0一次性创建新连接的数目； 
    acquireRetryAttempts：定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30； 
    acquireRetryDelay：两次连接中间隔时间，单位毫秒，默认为1000； 
    autoCommitOnClose：连接关闭时默认将所有未提交的操作回滚。默认为false； 
    automaticTestTable： C3P0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数，那么属性preferredTestQuery将被忽略。你 不能在这张Test表上进行任何操作，它将中为C3P0测试所用，默认为null； 
    breakAfterAcquireFailure：获取连接失败将会引起所有等待获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调   用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认为 false； 
    checkoutTimeout：当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0； 
    connectionTesterClassName： 通过实现ConnectionTester或QueryConnectionTester的类来测试连接，类名需设置为全限定名。默认为 com.mchange.v2.C3P0.impl.DefaultConnectionTester； 
    idleConnectionTestPeriod：隔多少秒检查所有连接池中的空闲连接，默认为0表示不检查； 
    initialPoolSize：初始化时创建的连接数，应在minPoolSize与maxPoolSize之间取值。默认为3； 
    maxIdleTime：最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃。默认为0； 
    maxPoolSize：连接池中保留的最大连接数。默认为15； 
    maxStatements：JDBC的标准参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存的Statement属 于单个Connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素，如果maxStatements与 maxStatementsPerConnection均为0，则缓存被关闭。默认为0； 
    maxStatementsPerConnection：连接池内单个连接所拥有的最大缓存Statement数。默认为0； 
    numHelperThreads：C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，通过多线程实现多个操作同时被执行。默认为3； 
    preferredTestQuery：定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个参数能显著提高测试速度。测试的表必须在初始数据源的时候就存在。默认为null； 
    propertyCycle： 用户修改系统配置参数执行前最多等待的秒数。默认为300； 
    testConnectionOnCheckout：因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都 将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
等方法来提升连接测试的性能。默认为false； 
    testConnectionOnCheckin：如果设为true那么在取得连接的同时将校验连接的有效性。默认为false。 

读配置文件的方式引用属性：
<bean id="propertyConfigurer"     
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">      
    <property name="location" value="/WEB-INF/jdbc.properties"/>      
</bean>      
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"       
        destroy-method="close">      
    <property name="driverClassName" value="${jdbc.driverClassName}" />      
    <property name="url" value="${jdbc.url}" />      
    <property name="username" value="${jdbc.username}" />      
    <property name="password" value="${jdbc.password}" />      
</bean>   
    在jdbc.properties属性文件中定义属性值： 
    jdbc.driverClassName= com.mysql.jdbc.Driver 
    jdbc.url= jdbc:mysql://localhost:3309/sampledb 
    jdbc.username=root 
    jdbc.password=1234 
    提示 经常有开发者在${xxx}的前后不小心键入一些空格，这些空格字符将和变量合并后作为属性的值。如： <property name="username" value=" ${jdbc.username} "></property> 的属性配置项，在前后都有空格，被解析后，username的值为“ 1234 ”，这将造成最终的错误，因此需要特别小心。

 获取JNDI数据源 
    如果应用配置在高性能的应用服务器（如WebLogic或Websphere等）上，我们可能更希望使用应用服务器本身提供的数据源。应用服务器的数据源 使用JNDI开放调用者使用，Spring为此专门提供引用JNDI资源的JndiObjectFactoryBean类。下面是一个简单的配置：
xml 代码
<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">      
    <property name="jndiName" value="java:comp/env/jdbc/bbt"/>      
</bean>  
通过jndiName指定引用的JNDI数据源名称。 
    Spring 2.0为获取J2EE资源提供了一个jee命名空间，通过jee命名空间，可以有效地简化J2EE资源的引用。下面是使用jee命名空间引用JNDI数据源的配置：
xml 代码
<beans xmlns=http://www.springframework.org/schema/beans    
xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance    
xmlns:jee=http://www.springframework.org/schema/jee    
xsi:schemaLocation="http://www.springframework.org/schema/beans     
http://www.springframework.org/schema/beans/spring-beans-2.0.xsd     
http://www.springframework.org/schema/jee    
http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">      
<jee:jndi-lookup id="dataSource" jndi-name=" java:comp/env/jdbc/bbt"/>      
</beans>  
Spring的数据源实现类 
    Spring本身也提供了一个简单的数据源实现类DriverManagerDataSource ，它位于org.springframework.jdbc.datasource包中。这个类实现了javax.sql.DataSource接口，但 它并没有提供池化连接的机制，每次调用getConnection()获取新连接时，只是简单地创建一个新的连接。因此，这个数据源类比较适合在单元测试 或简单的独立应用中使用，因为它不需要额外的依赖类。 
     下面，我们来看一下DriverManagerDataSource的简单使用：当然，我们也可以通过配置的方式直接使用DriverManagerDataSource。
java 代码
DriverManagerDataSource ds = new DriverManagerDataSource ();      
ds.setDriverClassName("com.mysql.jdbc.Driver");      
ds.setUrl("jdbc:mysql://localhost:3309/sampledb");      
ds.setUsername("root");      
ds.setPassword("1234");      
Connection actualCon = ds.getConnection();  
 
小结
    不管采用何种持久化技术，都需要定义数据源。Spring附带了两个数据源的实现类包，你可以自行选择进行定义。在实际部署时，我们可能会直接采用应用服 务器本身提供的数据源，这时，则可以通过JndiObjectFactoryBean或jee命名空间引用JNDI中的数据源。
DBCP与C3PO配置的区别：
C3PO ：DBCP：
xml 代码
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
    <property name="driverClass">  
        <value>oracle.jdbc.driver.OracleDriver</value>  
    </property>  
    <property name="jdbcUrl">             
        <value>jdbc:oracle:thin:@10.10.10.6:1521:DataBaseName</value>  
     </property>  
    <property name="user">  
        <value>testAdmin</value>  
    </property>  
    <property name="password">  
        <value>123456</value>  
    </property>  
</bean>  
 
xml 代码
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">  
    <property name="driverClassName">  
        <value>oracle.jdbc.driver.OracleDriver</value>  
    </property>  
    <property name="url">             
        <value>jdbc:oracle:thin:@10.10.10.6:1521:DataBaseName</value>  
     </property>  
    <property name="username">  
        <value>testAdmin</value>  
    </property>  
    <property name="password">  
        <value
        
        
        
        
        
        
        
        
  1、 DBCP数据源
依赖jar包
commons-dbcp.jar、commons-pool.jar
      配置数据源
               <bean id=”dataSource” class=”org.apache.commons.dbcp.BasicDataSource” destroy-method=”close”>
                         <property name=”driverClassName” value=”com.mysql.jdbc.Driver” />
                         <property name=”url” value=”jdbc:mysql://localhost:3309/dbname”/>
                         <property name=”username” value=”username”/>
                         <property name=”password” value=”password”/>
               </bean>
               BasicDataSourc 提供的close()方法关闭数据源，所以必须设定 desctroy-method=”close”
DBCP数据源的其他常用属性：
               defaultAutoCommit：设置从数据源中返回的连接是否采用自动提交机制。默认为true
               defaultReadOnly：设置数据源是否只能进行制度操作默认为false
               maxActive：最大连接数据库的连接数，设置为0时表示没有限制。
               maxIdle：最大等待连接中的数量，为0表示没有限制。
               maxWait：最大等待毫秒数，超时会抛出异常。
               validationQuery：用于验证是否连接成功的查询SQL语句，SQL语句至少要返回一行数据。
               RemoveAbandoned：是否自我中断，默认false
               removeAbandonedTimeout：几秒后数据连接自动断开。在removeAbandoned的值为true是生效
               logAbandoned：是否记录中断事件，默认false
2、 C3P0数据源
依赖jar包
               c3p0-0.9.0.4.jar
配置数据源
               <bean id=”dataSource” class=”com.mchange.v2.c3p0.ComboPooledDataSource” destroy-method=”close”>
                         <property name=”driverClass” value=”oracle.jdbc.dirver.OracleDriver” />
                         <property name=”jdbcUrl” value=”jdbc:oracle:thin:@localhost:1521:ora9i” />
                         <property name=”user” value=”username” />
                         <property name=”password” value=”password” />
               </bean>
ComboPooledDataSource提供的close()方法关闭数据源，所以必须设定 desctroy-method=”close”
DBCP数据源的其他常用属性：
               acquireIncrement：当连接池连接用完时，一次性创建新连接的数目
               acquireRetryAttempts：从数据库获取连接失败后重复尝试的次数默认30
               acquireRetryDelay：两次连接间隔时间毫秒 默认1000
               autoCommitOnClose：连接关闭时默认蒋所有未提交的操作回滚，默认false
               automaticTestTable：c3p0将建一个test的空表，并使用其自带的查询语句进行测试，如果定义了这个参数那么preferredTestQuery将呗忽略，你不能在这个表上做任何操作，他只为c3p0所用，默认为null
               breakAfterAcquireFailure：获取连接失败会引起所有等待中的连接抛出异常，但是数据源仍然有效，并在下次getConnection()的时候继续尝试。如果设置为true，连接失败的时候将断开并永久关闭。默认为false
               checkoutTimeout：当连接池用完时客户端调用getConnection()后等待获取新连接的时间超时抛出SQLException，设置为0为无限等待，单位毫秒，默认为0
               connectionTesterClassName：通过实习ConnectionTester或QueryConnectionTester的类来测试连接，类名需要设置为全限定名。默认为com.mchanger.v2.C3P0.impl.DefaultConnectionTester
               idelConnectionTestPeriod：隔多超秒检查所有连接池中的空闲连接默认为0不检查。
               initialPoolSize：初始化时创建的连接数，应在minPoolSize和maxPoolSize之间取值默认为3
               maxIdleTime：最大空闲时间，超过空闲时间的连接将被丢弃。为0或负数则永不丢弃，默认0
               maxPoolSize：连接池中保留的最大连接数默认15
               maxStatements:jdbc的表中参数，用以控制数据源内加载的PreparedStatement数量。但由于预缓存Statement属于单个Connection而不是整个连接池。所以设置这个参数要考虑到多方面的因素，如果maxStatement与maxStatementsPerConnection均为0测缓存被关闭。默认0
               maxStatementsPerConnection：连接池内单个连接所拥有的最大缓存Statement数默认为0
               numHelperThreads：C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作恶意有效的提升性能，通过多现场实现多个操作统计被进行。默认为3
               preferredTestQuery：定义所有连接测试都执行测试语句。在使用连接测试的情况下这个参数能显著提高测试速度。测试的表必须在初始数据源的时候就存在。默认为null
               propertyCycle：用户修改系统配置参数执行前最多等待的秒数。默认300
               testConnectionOnCheckout：因为性能消耗大请只带需要的时候使用它。如果设置为true那么在么个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。默认为false
               testConnectiononCheckin：如果设为true那么在去的连接的同时将校验连接的有效性。默认为false
3、  使用属性文件
<bean id=”propertyConfigurer” class=”org.springframework.beans.factory.config.PropertyPlaceholderConfigurer”>
               <property name=”location” value=”/WEB-INF/jdbc.properties” />
</bean>
<bean id=”dataSource” class=”org.apache.commons.dbcp.BasicDataSource” destroy-method=”close”>
               <property name=”driverClassName” value=”${jdbc.driverClassName} />”
</bean>
在jdbc.properties文件中定义属性值。
      Jdbc.driverClassname= com.mysql.jdbc.Driver
4、  获取jndi数据源
<bean id=”dataSource” class=”org.springframework.jndi.JndiObjectFactoryBean”>
               <property name=”jndiName” value=”java:comp/env/jdbc/bbt” />
</bean>      






/*********************************************/

在Spring3中，配置DataSource的方法有五种。 
第一种：beans.xml 

Xml代码  收藏代码
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
    destroy-method="close">  
    <property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />  
    <property name="url"  
        value="jdbc:sqlserver://localhost:1433;DatabaseName=spring" />  
    <property name="username" value="sa" />  
    <property name="password" value="********" />  
</bean>  

第二种：beans.xml 
    <bean id="mappings" 
    
Xml代码  收藏代码
class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">   
     <property name="locations" value="classpath:jdbc.properties"></property>   
     </bean>   
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
    </bean>  
在src文件夹里新建一个jdbc.properties文件，里面的内容为如下： 
Xml代码  收藏代码
jdbc.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver  
jdbcjdbc.url=jdbc:sqlserver://localhost:1433;DatabaseName=spring  
jdbc.username=sa  
jdbc.password=********  

第三种： 
beans.xml 
   
Xml代码  收藏代码
<bean id="mappings"   
     class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">   
     <property name="locations" value="classpath:jdbc.properties"></property>   
     </bean>   
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
    </bean>  
  
    <context:property-placeholder location="classpath:jdbc.properties" />在src文件夹里新建一个jdbc.properties文件，里面的内容为如下：  
jdbc.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver  
jdbcjdbc.url=jdbc:sqlserver://localhost:1433;DatabaseName=spring  
jdbc.username=sa  
jdbc.password=********  

其中第二种与第三种类似，只是指定配置文件的方法不一样。 
第四种： 
beans.xml 
Xml代码  收藏代码
<bean id="mappings"  
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
  
 <!-- typed as a java.util.Properties -->  
 <property name="properties">  
    <value>  
    jdbc.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver  
    jdbcjdbc.url=jdbc:sqlserver://localhost:1433;DatabaseName=spring  
    jdbc.username=sa  
    jdbc.password=********  
    </value>  
 </property>  
</bean>  
  
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driverClassName}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
    </bean>  


第五种：
Xml代码  收藏代码
beans.xml  
<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource"  
      destroy-method="close"  
      p:driverClassName="com.microsoft.sqlserver.jdbc.SQLServerDriver"  
      p:url="jdbc:sqlserver://localhost:1433;DatabaseName=spring"  
      p:username="sa"  
      p:password="********"/>  

再加上命名空间： 
Xml代码  收藏代码
xmlns:p="http://www.springframework.org/schema/p"  

性能参数要根据实际情况测试得来的数据确定如何配置。 
转自：http://www.cppblog.com/fenglin/articles/130494.html 


第六种，最近发在网上看到 

  pring3中提供了一种简便的方式就是context:property-placeholder/元素 
只需要在spring的配置文件里添加一句
Xml代码  收藏代码
<context:property-placeholder location="classpath:jdbc.properties"/>  
即可，这里location值为参数配置文件的位置，参数配置文件通常放在src目录下，而参数配置文件的格式跟java通用的参数配置文件相同，即键值对的形式，例如： 
#jdbc配置 
Java代码  收藏代码
test.jdbc.driverClassName=com.mysql.jdbc.Driver  
test.jdbc.url=jdbc:mysql://localhost:3306/test  
test.jdbc.username=root  
test.jdbc.password=root  
行内#号后面部分为注释 
应用： 
1.这样一来就可以为spring配置的bean的属性设置值了，比如spring有一个jdbc数据源的类DriverManagerDataSource 
在配置文件里这么定义bean： 
Java代码  收藏代码
<bean id="testDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">  
    <property name="driverClassName" value="${test.jdbc.driverClassName}"/>  
    <property name="url" value="${test.jdbc.url}"/>  
    <property name="username" value="${test.jdbc.username}"/>  
    <property name="password" value="${test.jdbc.password}"/>  
</bean>  

2.甚至可以将${ }这种形式的变量用在spring提供的注解当中，为注解的属性提供值 
外在化应用参数的配置 

在开发企业应用期间，或者在将企业应用部署到生产环境时，应用依赖的很多参数信息往往需要调整，比如LDAP连接、RDBMS JDBC连接信息。对这类信息进行外在化管理显得格外重要。PropertyPlaceholderConfigurer和PropertyOverrideConfigurer对象，它们正是担负着外在化配置应用参数的重任。 

  <context:property-placeholder/>元素 
PropertyPlaceholderConfigurer实现了BeanFactoryPostProcessor接口，它能够对<bean/>中的属性值进行外在化管理。开发者可以提供单独的属性文件来管理相关属性。比如，存在如下属性文件，摘自userinfo.properties。 
Properties代码  收藏代码
db.username=scott  
db.password=tiger  

如下内容摘自propertyplaceholderconfigurer.xml。正常情况下，在userInfo的定义中不会出现${db.username}、${db.password}等类似信息，这里采用PropertyPlaceholderConfigurer管理username和password属性的取值。DI容器实例化userInfo前，PropertyPlaceholderConfigurer会修改userInfo的元数据信息（<bean/>定义），它会用userinfo.properties中db.username对应的scott值替换${db.username}、db.password对应的tiger值替换${db.password}。最终，DI容器在实例化userInfo时，UserInfo便会得到新的属性值，而不是${db.username}、${db.password}等类似信息。 

Java代码  收藏代码
<bean id="propertyPlaceholderConfigurer"     
        class="org.springframework.beans.factory.config.    
PropertyPlaceholderConfigurer">    
    <property name="locations">    
        <list>    
            <value>userinfo.properties</value>    
        </list>    
    </property>    
</bean>    
   
<bean name="userInfo" class="test.UserInfo">    
  <property name="username" value="${db.username}"/>    
  <property name="password" value="${db.password}"/>    
</bean>   
通过运行并分析PropertyPlaceholderConfigurerDemo示例应用，开发者能够深入理解PropertyPlaceholderConfigurer。为简化PropertyPlaceholderConfigurer的使用，Spring提供了<context:property-placeholder/>元素。下面给出了配置示例，启用它后，开发者便不用配置PropertyPlaceholderConfigurer对象了。 

<context:property-placeholder location="userinfo.properties"/> 
PropertyPlaceholderConfigurer内置的功能非常丰富，如果它未找到${xxx}中定义的xxx键，它还会去JVM系统属性（System.getProperty()）和环境变量（System.getenv()）中寻找。通过启用systemPropertiesMode和searchSystemEnvironment属性，开发者能够控制这一行为。