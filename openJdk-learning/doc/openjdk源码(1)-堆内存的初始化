《Java GC的那些事》一文中说过：Java堆是被所有线程共享的一块内存区域，所有对象和数组都在堆上进行内存分配。为了进行高效的垃圾回收，虚拟机把堆内存划分成新生代、老年代和永久代（1.8中无永久代，使用metaspace实现）三块区域。


堆初始化

Java堆的初始化入口位于Universe::initialize_heap方法中，实现如下：


其中UseParallelGC、UseG1GC、UseConcMarkSweepGC都可以通过启动参数进行设置，整个初始化过程分成三步：
1、初始化GC策略；
2、初始化分代生成器；
3、初始化Java堆管理器；

GC策略初始化

HotSpot的GC策略实现如下：


其中MarkSweepPolicy是基于标记-清除思想的GC策略，如果虚拟机启动参数没有指定GC算法，则使用默认使用UseSerialGC，以ASConcurrentMarkSweepPolicy策略为例，对GC策略的初始化过程进行分析：


调用父类ConcurrentMarkSweepPolicy构造方法，其中initialize_all定义在GenCollectorPolicy中，实现如下：


initialize_flags

负责对新生代、老年代以及永久代设置的内存大小进行对齐调整。

1、调整永久代


由CollectorPolicy::initialize_flags实现，永久代的初始值默认为4M，最大值为64M，可以通过参数-XX:PermSize和-XX:MaxPermSize进行重新设置。

2、调整新生代


由GenCollectorPolicy::initialize_flags实现：
1、新生代的初始值NewSize默认为1M，最大值需要设置，可以通过参数-XX:NewSize和-XX:MaxNewSize或-Xmn进行设置；
2、NewRatio为老年代与新生代的大小比值，默认为2；
3、SurvivorRatio为新生代中Eden和Survivor的大小比值，默认为8；

3、调整老年代


由TwoGenerationCollectorPolicy::initialize_flags实现
1、老年代的初始值OldSize默认为4M，可以通过参数-XX:OldSize进行设置；
2、最大堆大小MaxHeapSize默认为96M，可以通过参数-Xmx进行设置；
3、如果设置的新生代和老年代的内存容量大于MaxHeapSize，则重新设置MaxHeapSize；

initialize_size_info

设置新生代、老年代以及永久代的容量，包括初始值、最小值和最大值

设置堆容量


其中InitialHeapSize和Arguments::min_heap_size()可以通过参数-Xms进行设置。
1、设置初始堆容量_initial_heap_byte_size；
2、设置最小堆容量_min_heap_byte_size；
3、设置最大堆容量_max_heap_byte_size；

设置新生代


1、如果MaxNewSize重新设置过，即设置-Xmn参数，则根据不同情况设置max_new_size；
2、否则通过scale_by_NewRatio_aligned方法根据NewRatio和_max_heap_byte_size重新计算max_new_size值，其中NewRatio默认为2，表示新生代的大小占整个堆的1/3；


3、如果最大堆_max_heap_byte_size等于最小堆_min_heap_byte_size，则设置新生代的初始值、最小值和最大值为max_new_size，否则执行步骤4；


4、如果NewSize重新设置过，即设置了-Xmn参数，则使用NewSize设置_min_gen0_size，否则使用scale_by_NewRatio_aligned方法重新计算新生代最小值和初始值，实现如下：


设置老年代

1、如果参数没有设置OldSize，则使用min_heap_byte_size() - min_gen0_size()，即最小堆大小和新生代最小值之差设置老年代最小值，初始值类似；
2、否则根据设置的OldSize，通过adjust_gen0_sizes方法重新设置新生代的最小值和初始值；

初始化分代生成器

分代生成器保存了各个内存代的初始值和最大值，新生代和老年代通过GenerationSpec实现，永久代通过PermanentGenerationSpec实现。

GenerationSpec实现


每个生成器GenerationSpec实例保存当前分代的GC算法、内存的初始值和最大值。

PermanentGenerationSpec实现


除了GenerationSpec实例中的数据，如果设置UseSharedSpaces和DumpSharedSpaces，还需要保存额外的数据。

ConcurrentMarkSweepPolicy::initialize_generations方法实现了分代生成器的初始化，实现如下：


创建新生代、老年代和永久代对应的生成器实例。

初始化Java堆管理器

GenCollectedHeap是整个Java堆的管理器，负责Java对象的内存分配和垃圾对象的回收，通过initialize方法进行初始化，实现如下：


1、通过GC策略的number_of_generations方法获取分代数量，如果使用ASConcurrentMarkSweepPolicy，默认分代数为2；
2、通过align方法对齐生成器的初始值和最大值（为什么需要一直对齐，我觉得前面初始化GC策略的时候已经对齐很多次了）；


3、通过allocate为堆申请空间；


4、通过分代生成器的init方法为对应的分代分配内存空间；


5、如果当前的GC策略为ConcurrentMarkSweepPolicy，则通过create_cms_collector创建GC线程。

作者：占小狼
链接：http://www.jianshu.com/p/0f7bed2df952
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。