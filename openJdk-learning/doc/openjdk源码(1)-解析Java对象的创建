Java对象的创建，首先会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。在类加载检查通过后，虚拟机将为新生对象分配内存。

  为对象分配内存，通常有以下两种方法：

指针碰撞法 假设Java堆中内存时完整的，已分配的内存和空闲内存分别在不同的一侧，通过一个指针作为分界点，需要分配内存时，仅仅需要把指针往空闲的一端移动与对象大小相等的距离。
空闲列表法 JVM通过维护一个列表，记录可用的内存块信息，当分配操作发生时，从列表中找到一个足够大的内存块分配给对象实例，并更新列表上的记录。
  堆内存分配时还需要考虑多线程并发问题，可能出现正在给对象A分配内存，指针或记录还未更新，对象B又同时分配到原来的内存，解决这个问题有两种方案：

1.采用CAS保证数据更新操作的原子性；
2.把内存分配的行为按照线程进行划分，在不同的空间中进行，每个线程在Java堆中预先分配一个内存块，称为本地线程分配缓冲（Thread Local Allocation Buffer, TLAB）。
  内存分配完成后，虚拟机将分配到的内存空间都初始化为零值，这一步保证了对象的实例字段可以不用赋初始值，就可以直接使用。

  接着虚拟机对对象进行其他必要的设置，例如这个对象是哪个类的实例、如何找到类的元数据、对象的哈希码、对象的GC分代年龄、是否启用偏向锁等。这些信息都存放在对象头中。具体可参考HotSpot的实现代码。

  执行完new指令后，接着执行init方法，把对象按照程序进行进行初始化，这样一个真正可用的对象才算创建好。

  对象在内存中布局可以分成三块区域：对象头(Header)、实例数据(Instance Data)和对齐填充(Padding)。

对象头 对象头包括两部分信息：第一部分用于存储对象运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、锁偏向ID、等，官方称为"Mark Word"。"Mark Word"会根据对象的状态复用自己的存储空间。
Alt text

  对象头的另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机无法从数组的元数据确定数组的大小。

实例数据   该部分存储的是对象真正有效信息，也是在程序中所定义的各种类型的字段内容。无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。这部分的存储顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。HotSpot虚拟机默认的分配策略为longs/doubles、ints、shorts/chars、bytes/booeans、oops(Ordinary Object Pointer)，从分配策略中可以看出，相同宽度的字段总是被分配到一起。在满足这个条件下，在父类中定义的变量会出现在子类的之前。

对齐填充   对齐填充仅仅起着占位符的作用。由于HotSpot虚拟机要求对象起始地址必须是8字节的整数倍，对象头部分正好是8字节的倍数，因此，当对象实例数据部分没有对齐时，就需要通过对齐填充哎补充。

对象的访问定位

  Java程序通过栈上的reference数据来操作堆上的对象。由于reference类型在Java虚拟机中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去访问堆中的对象的具体位置。因此对象访问方式也是由虚拟机实现而定的，目前主流的访问方式有使用句柄和直接指针两种。

使用句柄 在Java堆中划出一块内存来作为句柄池，reference存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。 Alt text

直接指针 reference中存储的就是对象地址，目前Sun HotSpot使用的就是这种方式。 Alt text

  使用句柄的好处是reference存储的是稳定的句柄地址，在对象被移动时只会改变实例数据，而reference本身不会改变。

  使用直接指针的好处就是速度更快。

  当在Java中new一个对象时，本质是在堆内存创建一个instanceOopDesc(C++类)对象。instanceOopDesc在实现上继承自oopDesc。oopDesc包含两个数据成员：_mark 和 _metadata。

_mark是markOop类型对象，用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等等，占用内存大小与虚拟机位长一致。
_metadata是一个联合体，其中wideKlassOop和narrowOop都是指向InstanceKlass对象的指针，wide版是普通指针，narrow版是压缩类指针（compressed Class pointer）。
  instanceOopDesc创建过程如下：

  1. 判断当前类是否包含不为空的finalize方法。

  2. 确定创建当前对象需要分配多大内存。

  3. 从堆中申请指定大小的内存，并创建instanceOopDesc对象。

  4. 如果当前类重写了finalize方法，且非空，需要把生成的对象封装成Finalizer对象并添加到 Finalizer链表中，对象被GC时，如果是Finalizer对象，会将对象赋值到pending对象。Reference Handler线程会将pending对象push到queue中，Finalizer线程poll到对象，先删除掉Finalizer链表中对应的对象，然后再执行对象的finalize方法。