java的强制类型转换
 
强制类型转换，又叫造型。分为基本数据类型和引用数据类型两种情况，这里探讨后者，即引用类型的强制类型转换。

对于引用类型来说，什么是强制类型转换呢？简单地说，就是把父类型转换为子类型。因为子类型比父类型的内涵要丰富，无非就是属性更多功能更强，所以要把父类型转换为子类型，需要强制，所以叫强制类型转换。那么，是不是只要是父类型的变量就可以转换为子类型呢？事实上不是，这里是有条件限制的。

首先来看发生在什么情况下。我们用一个类型的构造方法构造出一个对象的时候，对象的类型已经确定了，就是这个类型，但是java允许我们可以不用这个类型的变量引用它，而使用它的父类类型，这时候情况就是我们用一个功能较弱的类型引用了一个功能较强的对象。然而有时候我们又希望这个对象完全发挥它的作用，就需要用一个它本身的类型的变量来引用它，因为原来那个父类的变量是不具备这些功能的，不能使用variablename.function()来使其发挥作用，所以还是用它自己的吧。问题是对象已经在内存中了，已经构造完了，你即使声明一个它本身类型的变量怎么指向它呢？答案是借助原来那个变量，就是它父类型的那个变量，让新的变量和原来的那个指向同一个对象。方式就是两者之间划等号。可是引用类型变量的相等需要两者类型相同，问题是不相同，怎么办？那就是把父类型的变量强制转换成子类型。

举个例子来说，比如原来定义了两个类型，FatherClass和SonClass，然后构造了一个SonClass类型的对象，用一个FatherClass类型的变量father引用了，就像这样：

FatherClass father = new SonClass();

那么，需要将这个对象的类型还原的时候，就可以用这个表达式。

SonClass son = (SonClass)father;

其实，father仍然是FatherClass类型，只不过临时把它的能力提升了一下，然后这一切都交给了son这个变量。但是经过这样处理以后，这个对象就真正提升了能力了，在son这个变量的引用之下，从此以后恢复真身，可以自由发挥了。

我们刚才说从父类到子类的强制类型转换并不总是能够成功，那什么时候不能成功呢？

在于这个的对象的真实类型，也就是它是使用什么类的构造方法构造出来的。如果它本身就是父类的类型，那么强制类型转换是不会成功的。

还是举个例子：

FatherClass f = new FatherClass();

SonClass s = (SonClass)f; //这时候就会报错，运行时报错，编译能通过的

编译器只检查类型之间有无继承关系，有则通过；运行时检查真正类型，是则通过。

/* * Object f=new Object(); * String s=(String)f;//强制类型转换错误代码 */






## 转型有两种: 向上转型和向下转型(强制转型)

两种分别如下:
一种是向上转型
对于基础数据类型 , 可以自动转型 ,比如:
int a = 10;
long b = a;
这里就是把int型转成了long型 , 因为 long范围比int大 , 这样的转型不会有任何影响 , 所以可以自动转型

又比如 A a = new B(); 
其中 A 是B 的父类 , 这也是多态 , 就是父类的对象指向子类的引用 , 你调用a对象 , 实际上是B的类  , 但是B继承A , 拥有A的一切属性和方法 (不谈复写) 


第二种是向下转型 , 也就是强制

这种需要强转 , 比如
long a = 10 ;
int b = (int) a;
通过 (int)可以强制转型 , 但是这样会丢失精度 , 比如a如果超过了b的范围 , 那么强转成int型, 只会等于int的最大值

又比如 :
B b = new A(); 这样是不行的 , 需要有中间途径 , 比如
A a = new A();    Object obj = a;     B b = (A) a;
而这种强转 , 又有要求 , 必须是同类型 , 也就是说  A 就是B , 不然会报错.

不同类型之间如果要转型 , 需要通过中间途径 , 比如JSON , 将A转成JSON串 , 然后再转换为B















1.背景
      在Java中，之所以需要强制类型转换是为了防止程序员在不知情的情况下把A类型数据错当成B类型的数据。将一种类型的值赋给另一个类型的变量是很常见的，如果这两种是兼容的，那么Java将执行自动转换，例如int和long，将int类型赋值给long类型的变量，总是可行的。但不是所有的类型都兼容。例如，没有将double类型转换为byte型的定义。但是不兼容的类型之间的转换仍然是可能的。达到这个目的，就需要使用强制类型转换。完成两个不兼容类型的强制转换。
2.自动类型转换和强制类型转换
      在Java中由于继承和向上转型，子类可以非常自然地转换成父类，但是父类转换成子类则需要强制转换。因为子类拥有比父类更多的属性、更强的功能，所以父类转换为子类需要强制。
      当我们用一个类型的构造器构造出一个对象时，这个对象的类型就已经确定的，也就说它的本质是不会再发生变化了。在Java中我们可以通过继承、向上转型的关系使用父类类型来引用它，这个时候我们是使用功能较弱的类型引用功能较强的对象，这是可行的。但是将功能较弱的类型强制转功能较强的对象时，就不一定可以行了。
[java] view plain copy
Father father = new Son();  
Son son = (Son)father;  
//编译出错，ClassCastException  
Father father = new Father();  
Son son = (Son) father;  
      在第一个例子中，father被指向一个子类对象，子类也可以指向子类对象。而第二个例子中，father被传给一个父类对象，子类引用不能指向父类对象。即很重要的概念是：父类引用指向子类对象。将父类转换为子类之前，应该用instanceof检查。
[java] view plain copy
static class One {  
    public void foo() {  
        System.out.println("One");  
    }  
}  
static class Two extends One {  
    public void foo() {  
        System.out.println("Two");  
    }  
    public void dosth(){  
        System.out.println("Two again");  
    }  
}  
public static void main(String[] args) throws Exception{  
    One t = new Two(); //向上转型，即父类引用指向子类对象，此时子类对象的类型为父类的类型  
    t.foo();  
    t.dosth();//编译错误  
    t = (Two)t;   
    t.dosth();//编译错误   
    ((Two) t).dosth();//编译成功  
}  
向上转型是安全的，但是会有些子类特性会丢失，向下转型可以成功。
      总结：父类引用可以指向子类对象，子类引用不能指向父类对象。把子类对象直接赋给父类引用叫做向上转型，向上转型不用强制转型，如Father f1=new Son()，把指向子类对象的父类引用赋给子类引用叫做向下转型，要强制转型，如Son s1 = (Son)f1。向上转型会丢失子类特有的方法，但是子类overriding父类的方法，子类方法有效。 
      将一种类型的数据赋给另外一种类型变量时，满足下列两种要求将执行自动类型转换：1.两种类型是兼容的；2.目的类型的范围比来源类型大。   
      数据值类型按照范围从小到大为：byte，short，char，int，long，float，double
      例如int类型比所有byte合法类型大，因此不要求显式强制类型转换。对于数字类型，整型和浮点型都是彼此兼容的，但是数字类型和字符类型和布尔类型是不兼容的，字符类型和布尔类型也不是互相兼容的。
      自动类型转换不能满足所有的转换需求，比如int型变量赋值给byte型变量，这种转换不会自动进行，因为byte型比int型范围小。为了完成两种不兼容类型转换，需要用到强制类型转换。
      目标类型指定了要转换成为的类型。例如果将int型转为byte型，int型取值范围大于byte型，它的值将堆byte型范围进行取模。而把浮点型赋值给整数型，就会出现截断，截取掉小数部分。从其他数值类型转换为char类型时，必须进行强制转换。将char类型转换为其他数值类型时，除了byte、short必须强制转换之外，int、long、float、double都不用强制转换。
[java] view plain copy
byte b;  
int i = 257;  
double d = 32.13;  
b = (byte) i;  
System.out.println("i and b = " + i + " " + b);  
i = (int)d;  
System.out.println("d and i = " + d + " " + i);  
b = (byte)d;  
System.out.println("d and b = " + d + " " + b);  
byte e=(byte)130;   
System.out.println(e);  
   
   
/* 
* output 
i and b = 257 1 
d and i = 32.13 32 
d and b = 32.13 32 
-126 
*/  
       当257要转换为byte时，byte的范围是256，所以取模的结果是1。浮点值赋给整数型，截断了小数部分。
[java] view plain copy
short s = 1;  
s= s + 1;//编译错误  
short s1 = 1;  
s1 += 1;  
      上述陷阱是s = s + 1，s ＋ 1会隐式转换为int型，把int型号赋给short，会造成类型缺失。而s1 += 1相当于s1 = (short)(s1 + 1)会把s1 + 1强制转换为short类型，就不会报错。涉及到写代码的严谨性。
      对于自动装箱和自动拆箱，将一个基本数据类型转换为对应的引用类型时，不必强制转换。将一个基本数据类型的引用类型转换为基本数据类型时，也不必要强制转换。
[java] view plain copy
int i1 = 10;  
Integer iObj1 = i1;  
Integer iObj2 = new Integer(10);  
int i2 = iObj2;  
     在三目运算符中，会按照算术类型中的提升原则将两端操作提升至统一类型，如果两端有一个操作数是引用类型，则整个表达式结果用Object型表示。
[java] view plain copy
byte b = 10;   
short s = 20;   
int i = (b == 10) ? b : s;   
int i1 = 10;   
String str = "Hello";   
Object obj = (i1 == 10) ? i1 : str;  // 在这里变量i进行了自动装箱操作  
     int和String互相之间的转换，首先是int转String，有两种方法
[java] view plain copy
int i = 12345;  
String s = "";  
s = i + "";  
s = String.valueOf(i);  
    第一种方法，s = i + "";会产生两个String对象， s = String.valueOf(i);直接使用String的静态方法。
[java] view plain copy
String s = "12345";  
int i ;  
i=Integer.parseInt(s);  
i=Integer.valueOf(s).intValue();  
    第一种方法直接使用静态方法，不会产生多余的对象，但会抛出异常。第二种方法相当于new Integer(Integer.parseInt(s))也会抛出异常，但是会多产生一个对象。
      valueOf返回的是原对象，toString()返回的是字符串。
3.instanceof
      instanceof是Java二元操作符，测试左边对象是否是右边类的实例，返回boolean类型的数据，作用上可以避免强制类型转换失败。
4.JVM级别原理
      对于强制类型转换，且是引用类型，如果是父类向子类转换，这种只牵扯到引用名义类型的转换，具体的内存没有什么变化。
      而基本类型转换不同，数据发生了变化。但是基本数据类型不是对象，如果涉及到自动装箱和拆箱，实际上是调用类似Integer.parseInt()和Integer.valueOf()实现。
      父类向子类强制转换，如果成功不会有任何数据丢失，如果不是子类，那么会报错。基本类型之间的转换，如果是大范围向小范围的转换，有可能发生数据丢失或者精确丢失。

