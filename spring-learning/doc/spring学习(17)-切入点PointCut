定义切入点

    在前文（点击查看）中使用到的AdviceTest类中同一个切点（即* com.abc.service.*.advice*(..)匹配的连接点）却重复定义了多次，这显然不符合软件设计的原则，为了解决这个问题，AspectJ和spring都提供了切入点的定义。所谓定义切入点，其实质就是为一个切入点表达式起一个名称，从而允许在多个增强处理中重用该名称。
    Spring AOP只支持以Spring Bean的方法执行组作为连接点，所以可以把切入点看作所有能和切入表达式匹配的Bean方法。切入点定义包含两个部分：
一个切入点表达式：用于指定切入点和哪些方法进行匹配

一个包含名字和任意参数的方法签名：将作为切入点的名称

    在@AspectJ风格的AOP中，切入点签名采用一个普通的方法定义（方法体通常为空）来提供（方法名即为切点名），且该方法的返回值必须为void，切入点表达式需使用@Pointcut注解来标注。下面的代码片段定义了一个切入点，这个切入点将匹配任何名为transfer的方法的执行：

?

1

2

3

4

//使用@Pointcut注解时指定切入点表达式

@Pointcut("execution(* transfer(..))")

//使用一个返回值为void，方法体为空的方法来命名切入点，方法名即为切点名

private void myPointcut(){}
    切入点表达式，也就是组成@Pointcut注解的值，是规范的AspectJ 5切入点表达式。如果想要了解更多的关于AspectJ切入点语言，请参见AspectJ编程指南。
    一旦采用上面的代码片段定义了名为myPointcut的切入点之后，程序就可以多次重复使用该切点了，甚至可以在其他切面类、其他包的切面类里使用该切点，至于是否可以在其他切面类、其他包下使用这个切点，那就要看该方法前的访问控制修饰符了——本例中myPointcut使用private修饰，则意味着仅能在当前切面类中使用这个切点。
    如果需要使用本切面类中的切点，则可在使用@Pointcut注解时，指定value属性值为已有的切入点，如下：
?

1

2

3

4

@AfterReturning(pointcut="myPointcut()", returning="returnValue")

public void log(String message, Object returnValue) {

    //do something...

}
    从指定pointcut来看，其语法非常类似于Java中调用方法——只是该方法代表一个切点，其实质是为该增强处理方法定义一个切入点表达式。如果需要使用其他类中定义的切点，则定义这些切点的方法的修饰符不能为private。现在假设在另一个类PointcutDefinition中定义了一个名为myPointcutTest的切点：

?

1

2

3

4

5

public class PointcutDefinition {

    @Pointcut("execution(* something(..))")

    //访问控制符为public，这个切点可以在其他任何地方引用

    public void myPointcutTest(){}

}
    则在引用的时候需要带上类名，例如：

?

1

2

3

4

5

6

@AfterReturning(

    pointcut="PointcutDefinition.myPointcutTest() && args(message)", 

    returning="returnValue")

public void log(String message, Object returnValue) {

    //do something...

}


切入点指示符

    前面定义切点表达式时使用了大量的execution表达式，其中execution就是一个切入点指示符。Spring AOP仅支持部分AspectJ的切入点指示符，但Spring AOP还额外支持一个bean切入点指示符。不仅如此，因为Spring AOP只支持使用方法调用作为连接点，所以Spring AOP的切入点指示符仅匹配方法执行的连接点。
    完整的AspectJ切入点语言支持大量切入点指示符，但是Spring并不支持它们。它们是：call，get，preinitialization，staticinitialization，initialization，handler，adviceexecution，withincode，cflow，cflowbelow，if，@this和@withincode。一旦在Spring AOP中使用这些切点指示符，就会抛出IllegalArgumentException。
    Spring AOP支持的切入点指示符有如下几个：
execution：用于匹配执行方法的连接点，这是Spring AOP中国最主要的切入点指示符。该切入点的用法也相对复杂，execution表达式的格式如下：

    execution(modifier-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)

    上面的格式中，execution是不变的，用于作为execution表达式的开头，整个表达式中几个参数的详细解释如下：
modifier-pattern：指定方法的修饰符，支持通配符，该部分可以省略

ret-type-pattern：指定返回值类型，支持通配符，可以使用“*”来通配所有的返回值类型

declaring-type-pattern：指定方法所属的类，支持通配符，该部分可以省略

name-pattern：指定匹配的方法名，支持通配符，可以使用“*”来通配所有的方法名

param-pattern：指定方法的形参列表，支持两个通配符，“*”和“..”，其中“*”代表一个任意类型的参数，而“..”代表0个或多个任意类型的参数。

throw-pattern：指定方法声明抛出的异常，支持通配符，该部分可以省略


如下是几个execution表达式：

execution(public * * (..))//匹配所有public方法

execution(* set*(..))//匹配以set开始的方法

execution(* com.abc.service.AdviceManager.* (..))//匹配AdviceManager中任意方法

execution(* com.abc.service.*.* (..))//匹配com.abc.servcie包中任意类的任意方法

within：限定匹配特定类型的连接点，当使用Spring AOP的时候，只能匹配方法执行的连接点。下面是几个例子：

within(com.abc.service.*)//匹配com.abc.service包中的任意连接点
within(com.abc.service..*)//匹配com.abc.service包或子包中任意的连接点

this：用于指定AOP代理必须是指定类型的实例，用于匹配该对象的所有连接点。当使用Spring AOP的时候，只能匹配方法执行的连接点。下面是个例子：

        this(com.abc.service.AdviceManager)//匹配实现了AdviceManager接口的代理对象的所有连接点，在Spring中只是方法执行的连接点
target：用于限定目标对象必须是指定类型的实例，用于匹配该对象的所有连接点。当使用Spring AOP的时候，只能匹配方法执行的连接点。下面是个例子：

        target(com.abc.servcie.AdviceManager)//匹配实现了AdviceManager接口的目标对象的所有连接点，在Spring中只是方法执行的连接点

args：用于对连接点的参数类型进行限制，要求参数的类型时指定类型的实例。同样，当使用Spring AOP的时候，只能匹配方法执行的连接点。下面是个例子：

args(java.io.Serializable)//匹配只接受一个参数，且参数类型是Serializable的所有连接点，在Spring中只是方法执行的连接点

注意，这个例子与使用execution(* *(java.io.Serializable))定义的切点不同，args版本只匹配运行时动态传入参数值是Serializable类型的情形，而execution版本则匹配方法签名只包含一个Serializable类型的形参的方法。


    另外，Spring AOP还提供了一个名为bean的切入点提示符，它是Spring AOP额外支持的，并不是AspectJ所支持的切入点指示符。这个指示符对Spring框架来说非常有用：它将指定为Spring中的哪个Bean织入增强处理。当然，Spring AOP中只能使用方法执行作为连接点。

bean：用于指定只匹配该Bean实例内的连接点，实际上只能使用方法执行作为连接点。定义bean表达式时需要传入Bean的id或name，支持使用"*"通配符。下面是几个例子：

        bean(adviceManager)//匹配adviceManager实例内方法执行的连接点

        bean(*Manager)//匹配以Manager结尾的实例内方法执行的连接点



使用组合切点表达式

    Spring支持使用如下三个逻辑运算符来组合切入点表达式：

&&：要求连接点同时匹配两个切点表达式

||：要求连接点匹配至少一个切入点表达式

!：要求连接点不匹配指定的切入点表达式


    其实在之前介绍args的时候，已经用到了“&&”运算符：
?

1

pointcut("execution(* com.abc.service.*.*(..) && args(name))")
    上面的pointcut由两个表达式组成，而且使用&&来组合这两个表达式，因此连接点需要同时满足这两个表达式才能被织入增强处理。
    
    
  
  
  
  
  
Spring AOP支持的AspectJ切入点指示符

       切入点指示符用来指示切入点表达式目的，，在spring AOP中目前只有执行方法这一个连接点，Spring AOP支持的AspectJ切入点指示符如下：
         execution：用于匹配方法执行的连接点；
         within：用于匹配指定类型内的方法执行；
         this：用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配；
         target：用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；
         args：用于匹配当前执行的方法传入的参数为指定类型的执行方法；
         @within：用于匹配所以持有指定注解类型内的方法；
         @target：用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；
         @args：用于匹配当前执行的方法传入的参数持有指定注解的执行；
         @annotation：用于匹配当前执行方法持有指定注解的方法；
         bean：Spring AOP扩展的，AspectJ没有对于指示符，用于匹配特定名称的Bean对象的执行方法；
         reference pointcut：表示引用其他命名切入点，只有@ApectJ风格支持，Schema风格不支持。
       AspectJ切入点支持的切入点指示符还有： call、get、set、preinitialization、staticinitialization、initialization、handler、adviceexecution、withincode、cflow、cflowbelow、if、@this、@withincode；但Spring AOP目前不支持这些指示符，使用这些指示符将抛出IllegalArgumentException异常。这些指示符Spring AOP可能会在以后进行扩展。
6.5.1  命名及匿名切入点

       命名切入点可以被其他切入点引用，而匿名切入点是不可以的。
       只有@AspectJ支持命名切入点，而Schema风格不支持命名切入点。
如下所示，@AspectJ使用如下方式引用命名切入点：
 
6.5.2        ；类型匹配语法

首先让我们来了解下AspectJ类型匹配的通配符：
         *：匹配任何数量字符；
         ..：匹配任何数量字符的重复，如在类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数。
         +：匹配指定类型的子类型；仅能作为后缀放在类型模式后边。
 

java代码：
查看复制到剪贴板打印
java.lang.String    匹配String类型；  
java.*.String       匹配java包下的任何“一级子包”下的String类型；  
如匹配java.lang.String，但不匹配java.lang.ss.String  
java..*            匹配java包及任何子包下的任何类型;  
                  如匹配java.lang.String、java.lang.annotation.Annotation  
java.lang.*ing      匹配任何java.lang包下的以ing结尾的类型；  
java.lang.Number+  匹配java.lang包下的任何Number的自类型；  
                   如匹配java.lang.Integer，也匹配java.math.BigInteger  


接下来再看一下具体的匹配表达式类型吧：
         匹配类型：使用如下方式匹配
 
 
java代码：
查看复制到剪贴板打印
注解？ 类的全限定名字  
注解：可选，类型上持有的注解，如@Deprecated；
类的全限定名：必填，可以是任何类全限定名。
         匹配方法执行：使用如下方式匹配：
 
 
java代码：
查看复制到剪贴板打印
注解？ 修饰符? 返回值类型 类型声明?方法名(参数列表) 异常列表？  
 
 
注解：可选，方法上持有的注解，如@Deprecated；
修饰符：可选，如public、protected；
返回值类型：必填，可以是任何类型模式；“*”表示所有类型；
类型声明：可选，可以是任何类型模式；
方法名：必填，可以使用“*”进行模式匹配；
参数列表：“()”表示方法没有任何参数；“(..)”表示匹配接受任意个参数的方法，“(..,java.lang.String)”表示匹配接受java.lang.String类型的参数结束，且其前边可以接受有任意个参数的方法；“(java.lang.String,..)” 表示匹配接受java.lang.String类型的参数开始，且其后边可以接受任意个参数的方法；“(*,java.lang.String)” 表示匹配接受java.lang.String类型的参数结束，且其前边接受有一个任意类型参数的方法；
异常列表：可选，以“throws 异常全限定名列表”声明，异常全限定名列表如有多个以“，”分割，如throws java.lang.IllegalArgumentException, java.lang.ArrayIndexOutOfBoundsException。
         匹配Bean名称：可以使用Bean的id或name进行匹配，并且可使用通配符“*”；
6.5.3  组合切入点表达式

       AspectJ使用 且（&&）、或（||）、非（！）来组合切入点表达式。
       在Schema风格下，由于在XML中使用“&&”需要使用转义字符“&amp;&amp;”来代替之，所以很不方便，因此Spring ASP 提供了and、or、not来代替&&、||、！。
 
6.5.3  切入点使用示例

       一、execution：使用“execution(方法表达式)”匹配方法执行；
 
模式
描述
public * *(..)
任何公共方法的执行
* cn.javass..IPointcutService.*()
cn.javass包及所有子包下IPointcutService接口中的任何无参方法
* cn.javass..*.*(..)
cn.javass包及所有子包下任何类的任何方法
* cn.javass..IPointcutService.*(*)
cn.javass包及所有子包下IPointcutService接口的任何只有一个参数方法
* (!cn.javass..IPointcutService+).*(..)
非“cn.javass包及所有子包下IPointcutService接口及子类型”的任何方法
* cn.javass..IPointcutService+.*()
cn.javass包及所有子包下IPointcutService接口及子类型的的任何无参方法
* cn.javass..IPointcut*.test*(Java.util.Date)
cn.javass包及所有子包下IPointcut前缀类型的的以test开头的只有一个参数类型为java.util.Date的方法，注意该匹配是根据方法签名的参数类型进行匹配的，而不是根据执行时传入的参数类型决定的
如定义方法：public void test(Object obj);即使执行时传入java.util.Date，也不会匹配的；
* cn.javass..IPointcut*.test*(..)  throws
 IllegalArgumentException, ArrayIndexOutOfBoundsException
cn.javass包及所有子包下IPointcut前缀类型的的任何方法，且抛出IllegalArgumentException和ArrayIndexOutOfBoundsException异常
* (cn.javass..IPointcutService+
&& java.io.Serializable+).*(..)
任何实现了cn.javass包及所有子包下IPointcutService接口和java.io.Serializable接口的类型的任何方法
@java.lang.Deprecated * *(..)
任何持有@java.lang.Deprecated注解的方法
@java.lang.Deprecated @cn.javass..Secure  * *(..)
任何持有@java.lang.Deprecated和@cn.javass..Secure注解的方法
@(java.lang.Deprecated || cn.javass..Secure) * *(..)
任何持有@java.lang.Deprecated或@ cn.javass..Secure注解的方法
(@cn.javass..Secure  *)  *(..)
任何返回值类型持有@cn.javass..Secure的方法
*  (@cn.javass..Secure *).*(..)
任何定义方法的类型持有@cn.javass..Secure的方法
* *(@cn.javass..Secure (*) , @cn.javass..Secure (*))
任何签名带有两个参数的方法，且这个两个参数都被@ Secure标记了，
如public void test(@Secure String str1,
 @Secure String str1);
* *((@ cn.javass..Secure *))或
* *(@ cn.javass..Secure *)
任何带有一个参数的方法，且该参数类型持有@ cn.javass..Secure；
如public void test(Model model);且Model类上持有@Secure注解
* *(
@cn.javass..Secure (@cn.javass..Secure *) ,
@ cn.javass..Secure (@cn.javass..Secure *))
任何带有两个参数的方法，且这两个参数都被@ cn.javass..Secure标记了；且这两个参数的类型上都持有@ cn.javass..Secure；
 
* *(
java.util.Map<cn.javass..Model, cn.javass..Model>
, ..)
任何带有一个java.util.Map参数的方法，且该参数类型是以< cn.javass..Model, cn.javass..Model >为泛型参数；注意只匹配第一个参数为java.util.Map,不包括子类型；
如public void test(HashMap<Model, Model> map, String str);将不匹配，必须使用“* *(
java.util.HashMap<cn.javass..Model,cn.javass..Model>
, ..)”进行匹配；
而public void test(Map map, int i);也将不匹配，因为泛型参数不匹配
* *(java.util.Collection<@cn.javass..Secure *>)
任何带有一个参数（类型为java.util.Collection）的方法，且该参数类型是有一个泛型参数，该泛型参数类型上持有@cn.javass..Secure注解；
如public void test(Collection<Model> collection);Model类型上持有@cn.javass..Secure
* *(java.util.Set<? extends HashMap>)
任何带有一个参数的方法，且传入的参数类型是有一个泛型参数，该泛型参数类型继承与HashMap；
Spring AOP目前测试不能正常工作
* *(java.util.List<? super HashMap>)
任何带有一个参数的方法，且传入的参数类型是有一个泛型参数，该泛型参数类型是HashMap的基类型；如public voi test(Map map)；
Spring AOP目前测试不能正常工作
* *(*<@cn.javass..Secure *>)
任何带有一个参数的方法，且该参数类型是有一个泛型参数，该泛型参数类型上持有@cn.javass..Secure注解；
Spring AOP目前测试不能正常工作
 
二、within：使用“within(类型表达式)”匹配指定类型内的方法执行；
模式
描述
within(cn.javass..*)
cn.javass包及子包下的任何方法执行
within(cn.javass..IPointcutService+)
cn.javass包或所有子包下IPointcutService类型及子类型的任何方法
within(@cn.javass..Secure *)
持有cn.javass..Secure注解的任何类型的任何方法
必须是在目标对象上声明这个注解，在接口上声明的对它不起作用
 
三、this：使用“this(类型全限定名)”匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口方法也可以匹配；注意this中使用的表达式必须是类型全限定名，不支持通配符；
 
模式
描述
this(cn.javass.spring.chapter6.service.IPointcutService)
当前AOP对象实现了 IPointcutService接口的任何方法
this(cn.javass.spring.chapter6.service.IIntroductionService)
当前AOP对象实现了 IIntroductionService接口的任何方法
也可能是引入接口
 
 
 
 
 
 
四、target：使用“target(类型全限定名)”匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；注意target中使用的表达式必须是类型全限定名，不支持通配符；
模式
描述
target(cn.javass.spring.chapter6.service.IPointcutService)
当前目标对象（非AOP对象）实现了 IPointcutService接口的任何方法
target(cn.javass.spring.chapter6.service.IIntroductionService)
当前目标对象（非AOP对象） 实现了IIntroductionService 接口的任何方法
不可能是引入接口
 
 
 
 
 
 
 
 
五、args：使用“args(参数类型列表)”匹配当前执行的方法传入的参数为指定类型的执行方法；注意是匹配传入的参数类型，不是匹配方法签名的参数类型；参数类型列表中的参数必须是类型全限定名，通配符不支持；args属于动态切入点，这种切入点开销非常大，非特殊情况最好不要使用；
模式
描述
args (java.io.Serializable,..)
任何一个以接受“传入参数类型为 java.io.Serializable” 开头，且其后可跟任意个任意类型的参数的方法执行，args指定的参数类型是在运行时动态匹配的
 
 
 
 
 
 
六、@within：使用“@within(注解类型)”匹配所以持有指定注解类型内的方法；注解类型也必须是全限定类型名；
模式
描述
@within cn.javass.spring.chapter6.Secure)
任何目标对象对应的类型持有Secure注解的类方法；
必须是在目标对象上声明这个注解，在接口上声明的对它不起作用
 
 
 
 
 
 
七、@target：使用“@target(注解类型)”匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；注解类型也必须是全限定类型名； 
 
模式
描述
@target (cn.javass.spring.chapter6.Secure)
任何目标对象持有Secure注解的类方法；
必须是在目标对象上声明这个注解，在接口上声明的对它不起作用
 
 
 
 
 
 
八、@args：使用“@args(注解列表)”匹配当前执行的方法传入的参数持有指定注解的执行；注解类型也必须是全限定类型名；
模式
描述
@args (cn.javass.spring.chapter6.Secure)
任何一个只接受一个参数的方法，且方法运行时传入的参数持有注解 cn.javass.spring.chapter6.Secure；动态切入点，类似于arg指示符；
 
 
 
 
 
 
九、@annotation：使用“@annotation(注解类型)”匹配当前执行方法持有指定注解的方法；注解类型也必须是全限定类型名；
模式
描述
@annotation(cn.javass.spring.chapter6.Secure )
当前执行方法上持有注解 cn.javass.spring.chapter6.Secure将被匹配
 
 
 
 
 
十、bean：使用“bean(Bean id或名字通配符)”匹配特定名称的Bean对象的执行方法；Spring ASP扩展的，在AspectJ中无相应概念；
模式
描述
bean(*Service)
匹配所有以Service命名（id或name）结尾的Bean
 
 
 
 
十一、reference pointcut：表示引用其他命名切入点，只有@ApectJ风格支持，Schema风格不支持，如下所示：
 
      
       比如我们定义如下切面：

java代码：
查看复制到剪贴板打印
package cn.javass.spring.chapter6.aop;  
import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.Pointcut;  
@Aspect  
public class ReferencePointcutAspect {  
    @Pointcut(value="execution(* *())")  
    public void pointcut() {}  
}  
 
 
       可以通过如下方式引用：
 
 
java代码：
查看复制到剪贴板打印
@Before(value = "cn.javass.spring.chapter6.aop.ReferencePointcutAspect.pointcut()")  
public void referencePointcutTest2(JoinPoint jp) {}  

       除了可以在@AspectJ风格的切面内引用外，也可以在Schema风格的切面定义内引用，引用方式与@AspectJ完全一样。
 
       到此我们切入点表达式语法示例就介绍完了，我们这些示例几乎包含了日常开发中的所有情况，但当然还有更复杂的语法等等，如果以上介绍的不能满足您的需要，请参考AspectJ文档。
       由于测试代码相当长，所以为了节约篇幅本示例代码在cn.javass.spring.chapter6. PointcutTest文件中，需要时请参考该文件。
6.6  通知参数
       前边章节已经介绍了声明通知，但如果想获取被被通知方法参数并传递给通知方法，该如何实现呢？接下来我们将介绍两种获取通知参数的方式。
使用JoinPoint获取：Spring AOP提供使用org.aspectj.lang.JoinPoint类型获取连接点数据，任何通知方法的第一个参数都可以是JoinPoint(环绕通知是ProceedingJoinPoint，JoinPoint子类)，当然第一个参数位置也可以是JoinPoint.StaticPart类型，这个只返回连接点的静态部分。
1) JoinPoint：提供访问当前被通知方法的目标对象、代理对象、方法参数等数据：
 
 
java代码：
查看复制到剪贴板打印
package org.aspectj.lang;  
import org.aspectj.lang.reflect.SourceLocation;  
public interface JoinPoint {  
    String toString();         //连接点所在位置的相关信息  
    String toShortString();     //连接点所在位置的简短相关信息  
    String toLongString();     //连接点所在位置的全部相关信息  
    Object getThis();         //返回AOP代理对象  
    Object getTarget();       //返回目标对象  
    Object[] getArgs();       //返回被通知方法参数列表  
    Signature getSignature();  //返回当前连接点签名  
    SourceLocation getSourceLocation();//返回连接点方法所在类文件中的位置  
    String getKind();        //连接点类型  
    StaticPart getStaticPart(); //返回连接点静态部分  
}  
 
 
 
2）ProceedingJoinPoint：用于环绕通知，使用proceed()方法来执行目标方法：
 
java代码：
查看复制到剪贴板打印
public interface ProceedingJoinPoint extends JoinPoint {  
    public Object proceed() throws Throwable;  
    public Object proceed(Object[] args) throws Throwable;  
}  

 
3) JoinPoint.StaticPart：提供访问连接点的静态部分，如被通知方法签名、连接点类型等：
 
java代码：
查看复制到剪贴板打印
public interface StaticPart {  
Signature getSignature();    //返回当前连接点签名  
String getKind();          //连接点类型  
    int getId();               //唯一标识  
String toString();         //连接点所在位置的相关信息  
    String toShortString();     //连接点所在位置的简短相关信息  
    String toLongString();     //连接点所在位置的全部相关信息  
}  
 
使用如下方式在通知方法上声明，必须是在第一个参数，然后使用jp.getArgs()就能获取到被通知方法参数：
 
 
 
java代码：
查看复制到剪贴板打印
@Before(value="execution(* sayBefore(*))")  
public void before(JoinPoint jp) {}  
  
@Before(value="execution(* sayBefore(*))")  
public void before(JoinPoint.StaticPart jp) {}  
 
自动获取：通过切入点表达式可以将相应的参数自动传递给通知方法，例如前边章节讲过的返回值和异常是如何传递给通知方法的。
在Spring AOP中，除了execution和bean指示符不能传递参数给通知方法，其他指示符都可以将匹配的相应参数或对象自动传递给通知方法。
 
 
java代码：
查看复制到剪贴板打印
@Before(value="execution(* test(*)) && args(param)", argNames="param")  
public void before1(String param) {  
    System.out.println("===param:" + param);  
}  
 
 
 
       切入点表达式execution(* test(*)) && args(param) ：
1）首先execution(* test(*))匹配任何方法名为test，且有一个任何类型的参数；
2）args(param)将首先查找通知方法上同名的参数，并在方法执行时（运行时）匹配传入的参数是使用该同名参数类型，即java.lang.String；如果匹配将把该被通知参数传递给通知方法上同名参数。
其他指示符（除了execution和bean指示符）都可以使用这种方式进行参数绑定。
在此有一个问题，即前边提到的类似于【3.1.2构造器注入】中的参数名注入限制：在class文件中没生成变量调试信息是获取不到方法参数名字的。
所以我们可以使用策略来确定参数名：
如果我们通过“argNames”属性指定了参数名，那么就是要我们指定的；
 
java代码：
查看复制到剪贴板打印
@Before(value=" args(param)", argNames="param") //明确指定了  
public void before1(String param) {  
    System.out.println("===param:" + param);  
}  
 
如果第一个参数类型是JoinPoint、ProceedingJoinPoint或JoinPoint.StaticPart类型，应该从“argNames”属性省略掉该参数名（可选，写上也对），这些类型对象会自动传入的，但必须作为第一个参数；
 
java代码：
查看复制到剪贴板打印
@Before(value=" args(param)", argNames="param") //明确指定了  
public void before1(JoinPoint jp, String param) {  
    System.out.println("===param:" + param);  
}  
 
如果“class文件中含有变量调试信息”将使用这些方法签名中的参数名来确定参数名；
 
java代码：
查看复制到剪贴板打印
@Before(value=" args(param)") //不需要argNames了  
public void before1(JoinPoint jp, String param) {  
    System.out.println("===param:" + param);  
}  
 
如果没有“class文件中含有变量调试信息”，将尝试自己的参数匹配算法，如果发现参数绑定有二义性将抛出AmbiguousBindingException异常；对于只有一个绑定变量的切入点表达式，而通知方法只接受一个参数，说明绑定参数是明确的，从而能配对成功。
 
java代码：
查看复制到剪贴板打印
@Before(value=" args(param)")   
public void before1(JoinPoint jp, String param) {  
    System.out.println("===param:" + param);  
}  
 
以上策略失败将抛出IllegalArgumentException。
接下来让我们示例一下组合情况吧：
 
 
 
java代码：
查看复制到剪贴板打印
@Before(args(param) && target(bean) && @annotation(secure)",   
        argNames="jp,param,bean,secure")  
public void before5(JoinPoint jp, String param,  
 IPointcutService pointcutService, Secure secure) {  
……  
}  
 
              该示例的执行步骤如图6-5所示。
 
图6-5 参数自动获取流程
 
除了上边介绍的普通方式，也可以对使用命名切入点自动获取参数：
 
 
java代码：
查看复制到剪贴板打印
@Pointcut(value="args(param)", argNames="param")  
private void pointcut1(String param){}  
@Pointcut(value="@annotation(secure)", argNames="secure")  
private void pointcut2(Secure secure){}  
      
@Before(value = "pointcut1(param) && pointcut2(secure)",  
 argNames="param, secure")  
public void before6(JoinPoint jp, String param, Secure secure) {  
……  
}  
 
       自此给通知传递参数已经介绍完了，示例代码在cn.javass.spring.chapter6.ParameterTest文件中。
 
 
 
 
       在Spring配置文件中，所以AOP相关定义必须放在<aop:config>标签下，该标签下可以有<aop:pointcut>、<aop:advisor>、<aop:aspect>标签，配置顺序不可变。
<aop:pointcut>：用来定义切入点，该切入点可以重用；
<aop:advisor>：用来定义只有一个通知和一个切入点的切面；
<aop:aspect>：用来定义切面，该切面可以包含多个切入点和通知，而且标签内部的通知和切入点定义是无序的；和advisor的区别就在此，advisor只包含一个通知和一个切入点。
 
 
以上源自：http://jinnianshilongnian.iteye.com/blog/1415606






例子详解：
 @AspectJ可以使用切点函数定义切点，我们还可以使用逻辑运算符对切点进行复核运算得到复合的切点，为了在切面中重用切点，我们还可以对切点进行命名，以便在其他的地方引用定义过的切点。当一个连接点匹配多个切点时，需要考虑织入顺序的问题，此外一个重要的问题是如何再增强中访问连接点上下文的信息。

Waiter接口：
package com.yyq.aspectJAdvanced;
public interface Waiter {
    void greetTo(String name);
    void serveTo(String name);
}
NaiveWaiter实现类：

复制代码
package com.yyq.aspectJAdvanced;
public class NaiveWaiter implements Waiter {
    @Override
    public void greetTo(String name) {
        System.out.println("NaiveWaiter：greet to " + name + "...");
    }
    @Override
    public void serveTo(String name) {
        System.out.println("NaiveWaiter：serving to " + name + "...");
    }
    public void smile(String clientName,int times){
        System.out.println("NaiveWaiter:smile to  "+clientName+ times+"times...");
    }
}
复制代码
 NaughtyWaiter实现类：

复制代码
package com.yyq.aspectJAdvanced;
public class NaughtyWaiter implements Waiter {
    public void greetTo(String clientName) {
        System.out.println("NaughtyWaiter:greet to " + clientName + "...");
    }
    public void serveTo(String clientName) {
        System.out.println("NaughtyWaiter:serving " + clientName + "...");
    }
    public void joke(String clientName, int times) {
        System.out.println("NaughtyWaiter:play " + times + " jokes to " + clientName + "...");
    }
}
复制代码
Seller接口：

package com.yyq.aspectJAdvanced;
public interface Seller {
  int sell(String goods, String clientName);
}
SmallSeller实现类：

复制代码
package com.yyq.aspectJAdvanced;
public class SmartSeller implements Seller {
    public int sell(String goods,String clientName) {
        System.out.println("SmartSeller: sell "+goods +" to "+clientName+"...");
        return 100;
    }
    
    public void checkBill(int billId){
        if(billId == 1) throw new IllegalArgumentException("iae Exception");
        else throw new RuntimeException("re Exception");
    }
}
复制代码
beans.xml配置文件：

复制代码
<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <bean id="naiveWaiter" class="com.yyq.aspectJAdvanced.NaiveWaiter"/>
    <bean id="naughtyWaiter" class="com.yyq.aspectJAdvanced.NaughtyWaiter"/>
    <bean id="seller" class="com.yyq.aspectJAdvanced.SmartSeller"/>
 <!--
    <bean class="com.yyq.aspectJAdvanced.TestAspect"/>
   
    <bean class="com.yyq.aspectJAdvanced.TestAspect2"/>
    <bean class="com.yyq.aspectJAdvanced.TestAspect3"/>
    <bean class="com.yyq.aspectJAdvanced.TestAspect4"/>
    <bean class="com.yyq.aspectJAdvanced.TestAspect5"/>
    <bean id="naiveWaiter2" class="com.yyq.aspectJAdvanced.NaiveWaiter2"/>
    <bean class="com.yyq.aspectJAdvanced.TestAspect6"/>
    <bean class="com.yyq.aspectJAdvanced.TestAspect7"/>
    <bean class="com.yyq.aspectJAdvanced.TestAspect8"/>
-->
</beans>
复制代码
1、切点符合运算
    使用切点符合运算符，我们将拥有强大而灵活的切点表达能力。
TestAspect：切点符合运算定义切面
复制代码
package com.yyq.aspectJAdvanced;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;

@Aspect
public class TestAspect {
    //与非运算
    @Before("!target(com.yyq.aspectJAdvanced.NaiveWaiter) && execution(* serveTo(..))")
    public void notServeInNaiveWaiter(){
        System.out.println("--notServeInNaiveWaiter() executed!--");
    }
    //与运算
    @After("within(com.yyq.aspectJAdvanced.*) && execution(* greetTo(..))")
    public void greetToFun(){
        System.out.println("--greetToFun() executed!--");
    }
    //或运算
    @AfterReturning("target(com.yyq.aspectJAdvanced.Waiter) || target(com.yyq.aspectJAdvanced.Seller)")
    public void waiterOrSeller(){
        System.out.println("--waiterOrSeller() executed!--");
    }
}
复制代码
 测试方法：

复制代码
 @Test
    public void pointAspectJTest() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        Waiter naiveWaiter = (Waiter) ctx.getBean("naiveWaiter");
        Waiter naughtyWaiter = (Waiter) ctx.getBean("naughtyWaiter");
        naiveWaiter.greetTo("John");
        naiveWaiter.serveTo("John");
        naughtyWaiter.greetTo("Tom");
        naughtyWaiter.serveTo("Tom");
    }
复制代码
输出结果：
NaiveWaiter：greet to John...
--greetToFun() executed!--
--waiterOrSeller() executed!--
NaiveWaiter：serving to John...
--waiterOrSeller() executed!--
NaughtyWaiter:greet to Tom...
--greetToFun() executed!--
--waiterOrSeller() executed!--
--notServeInNaiveWaiter() executed!--
NaughtyWaiter:serving Tom...
--waiterOrSeller() executed!--
 
2、命名切点
    切点直接声明在增强方法处被称为匿名切点，匿名切点只能在声明处使用。如果希望在其他地方重用一个切点，我们可以通过@Pointcut注解以及切面类方法对切点进行命名。
TestNamePointcut：命名切点类
复制代码
package com.yyq.aspectJAdvanced;
import org.aspectj.lang.annotation.Pointcut;
public class TestNamePointcut {
    //通过注解方法inPackage()对该切点进行命名，方法可视域修饰符为private，表明该命名切点只能在本切面类中使用
    @Pointcut("within(com.yyq.aspectJAdvaned.*)")
    private void inPackage(){}
    @Pointcut("execution(* greetTo(..))")
    protected void greetTo(){}
    @Pointcut("inPackage() and greetTo()")
    public void inPkgGreetTo(){}
}
复制代码
 TestAspect2：切面实现类

复制代码
package com.yyq.aspectJAdvanced;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
@Aspect
public class TestAspect2 {
    @Before("TestNamePointcut.inPkgGreetTo()")
    public void pkgGreetTo(){
        System.out.println("--pkgGreetTo() executed!--");
    }
    @Before("target(com.yyq.aspectJAdvanced.NaiveWaiter) || TestNamePointcut.inPkgGreetTo()")
    public void pkgGreetToNotnaiveWaiter(){
        System.out.println("--pkgGreetToNotnaiveWaiter() executed!--");
    }
}
复制代码
测试方法：

复制代码
@Test
    public void pointAspectJTest2() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        NaiveWaiter naiveWaiter = (NaiveWaiter) ctx.getBean("naiveWaiter");
        naiveWaiter.smile("Andy", 2);
    }
复制代码
输出结果：
--pkgGreetToNotnaiveWaiter() executed!--
NaiveWaiter:smile to  Andy2times...
 
3、增强织入的顺序
    一个连接点可以同时匹配多个切点，切点对应的增强在连接点上的织入顺序的安排主要有以下3种情况：
    1）如果增强在同一个切面类中声明，则依照增强在切面类中定义的顺序进行织入；
    2）如何增强位于不同的切面类中，且这些切面类都实现了org.springframework.core.Order接口，则由接口方法的顺序号决定（顺序号小的先织入）；
    3）如果增强位于不同的切面类中，且这些切面类没有实现org.springframework.core.Order接口，织入的顺序是不确定的。
 
4、访问连接点信息
    AspectJ使用org.aspectj.lang.JoinPoint接口表示目标类连接点对象，如果是环绕增强时，使用org.aspectj.lang.ProceedingJoinPoint表示连接点对象，该类是JoinPoint的子接口，任何一个增强方法都可以通过将第一个入参声明为JoinPoint访问到连接点上下文的信息。
TestAspect3：切面实现类
复制代码
@Aspect
public class TestAspect3 {
    @Around("execution(* greetTo(..)) && target(com.yyq.aspectJAdvanced.NaiveWaiter)")
    public void joinPointAccess(ProceedingJoinPoint pjp) throws Throwable {
        System.out.println("---joinPointAccess---");
        System.out.println("args[0]:" + pjp.getArgs()[0]);
        System.out.println("signature:" + pjp.getTarget().getClass());
        pjp.proceed();
        System.out.println("---joinPointAccess---");
    }
}
复制代码
 测试方法：

复制代码
 @Test
    public void pointAspectJTest3() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        Waiter naiveWaiter = (Waiter) ctx.getBean("naiveWaiter");
        naiveWaiter.greetTo("Andy");
    }
复制代码
输出结果：
---joinPointAccess---
args[0]:Andy
signature:class com.yyq.aspectJAdvanced.NaiveWaiter
NaiveWaiter：greet to Andy...
---joinPointAccess---
 
5、绑定连接点方法入参
    args()用于绑定连接点方法的入参；@annotation()用于绑定连接点方法的注解对象；而@args()用于绑定连接点方法入参的注解。
TestAspect4：切面实现类
复制代码
@Aspect
public class TestAspect4 {
    @Before("target(com.yyq.aspectJAdvanced.NaiveWaiter) && args(name,num,..)")
    public void bindJoinPointParams(int num, String name) {
        System.out.println("---bindJoinPointParams---");
        System.out.println("name:" + name);
        System.out.println("num:" + num);
        System.out.println("---bindJoinPointParams---");
    }
}
复制代码
 测试方法：

复制代码
@Test
    public void pointAspectJTest4() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        NaiveWaiter naiveWaiter = (NaiveWaiter) ctx.getBean("naiveWaiter");
        naiveWaiter.smile("Andy", 3);
    }
复制代码
输出结果：
---bindJoinPointParams---
name:Andy
num:3
---bindJoinPointParams---
NaiveWaiter:smile to  Andy 3 times...
 
6、绑定代理对象
    使用this()或target()可绑定被代理对象实例，在通过类实例名绑定对象时，还依然具有原来连接点匹配的功能，只不过类名是通过增强方法中同名入参的类型间接决定罢了。
TestAspect5：切面实现类
复制代码
@Aspect
public class TestAspect5 {
    @Before("this(waiter)")
    public void bindProxyObj(Waiter waiter){
        System.out.println("---bindProxyObj---");
        System.out.println(waiter.getClass().getName());
        System.out.println("---bindProxyObj---");
    }
}
复制代码
 测试方法：

复制代码
@Test
    public void pointAspectJTest5() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        Waiter waiter = (Waiter) ctx.getBean("naiveWaiter");
        waiter.greetTo("Yang");
    }
复制代码
输出结果：
---bindProxyObj---
com.yyq.aspectJAdvanced.NaiveWaiter
EnhancerByCGLIB
fefafe52
---bindProxyObj---
NaiveWaiter：greet to Yang...
 
7、绑定类注解对象
    @within()和@target()函数可以将目标类的注解对象绑定到增强方法中，我们通过@within()演示注解绑定的操作。
TestAspect6：切面测试类
复制代码
@Aspect
public class TestAspect6 {
    @Before("@within(m)")
    public void bindTypeAnnoObject(Monitorable m) {
        System.out.println("---bindTypeAnnoObject---");
        System.out.println(m.getClass().getName());
        System.out.println("---bindTypeAnnoObject---");
    }
}
复制代码
 测试方法：

复制代码
@Test
    public void pointAspectJTest6() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        Waiter waiter = (Waiter) ctx.getBean("naiveWaiter2");
        ((NaiveWaiter2)waiter).greetTo("Yang");
    }
复制代码
输出结果：
---bindTypeAnnoObject---
$Proxy4
---bindTypeAnnoObject---
NaiveWaiter：greet to Yang...
 
8、绑定返回值
    在后置增强中，我们可以通过returning绑定连接点方法的返回值。
TestAspect7：切面实现类
复制代码
@Aspect
public class TestAspect7 {
    @AfterReturning(value = "target(com.yyq.aspectJAdvanced.SmartSeller)", returning = "retVal")
    public void bindReturnValue(int retVal) {
        System.out.println("---bindReturnValue---");
        System.out.println("returnValue:" + retVal);
        System.out.println("---bindReturnValue---");
    }
}
复制代码
 测试方法：

复制代码
 @Test
    public void pointAspectJTest7() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        SmartSeller seller = (SmartSeller) ctx.getBean("seller");
        seller.sell("Beer", "John");
    } 
复制代码
输出结果：
SmartSeller: sell Beer to John...
---bindReturnValue---
returnValue:100
---bindReturnValue---
 
9、绑定抛出的异常
    和通过切点函数绑定连接点信息不同，连接点抛出的异常必须使用AfterThrowing注解的throwing成员进行绑定。
TestAspect8：切面实现类
复制代码
@Aspect
public class TestAspect8 {
    @AfterThrowing(value = "target(com.yyq.aspectJAdvanced.SmartSeller)", throwing = "iae")
    public void bindException(IllegalArgumentException iae) {
        System.out.println("---bindException---");
        System.out.println("exception:" + iae.getMessage());
        System.out.println("---bindException---");
    }
}
复制代码
测试方法：

复制代码
 @Test
    public void pointAspectJTest8() {
        String configPath = "com\\yyq\\aspectJAdvanced\\beans.xml";
        ApplicationContext ctx = new ClassPathXmlApplicationContext(configPath);
        SmartSeller seller = (SmartSeller) ctx.getBean("seller");
        seller.checkBill(1);
    }
复制代码
输出结果：
---bindException---
exception:iae Exception
---bindException---
 
java.lang.IllegalArgumentException: iae Exception    